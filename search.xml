<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件设计与体系结构B复习</title>
      <link href="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/"/>
      <url>/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-8"><a href="#1-8" class="headerlink" title="1~8"></a>1~8</h2><h3 id="各种性能指标的定义及如何到达各种性能指标的方法"><a href="#各种性能指标的定义及如何到达各种性能指标的方法" class="headerlink" title="各种性能指标的定义及如何到达各种性能指标的方法"></a>各种性能指标的定义及如何到达各种性能指标的方法</h3><ul><li><p>吞吐量 （Throughput）<br> 定义：单位时间内成功地传送数据的数量<br> 实现：Average 平均，Peak 峰值<br> 许多系统具有低平均但高峰值吞吐量的需求</p></li><li><p>响应时间（Response Time）<br> 定义：应用程序在处理请求时显示延迟的时间<br> 实现：Guaranteed time 最大响应时间  Average time 平均响应时间<br> 95%的响应在4秒以内，全部在10秒之内</p></li><li><p>最后期限（Deadlines）<br> 定义：有些事情必须在指定的时间之前完成<br> 实现：最后期限通常与IT系统中的批处理作业相关。</p></li></ul><h3 id="有哪些常见架构风格"><a href="#有哪些常见架构风格" class="headerlink" title="有哪些常见架构风格"></a>有哪些常见架构风格</h3><p>1）<strong>管道和过滤器</strong>（Pipe and Filter）</p><ul><li>管道-过滤器模式的体系结构是面向数据流的软件体系结构。</li><li>它最典型的应用是在编译系统。</li><li>一个普通的编译系统包括词法分析器,语法分析器,语义分析与中间代码生成器,优化器,目标代码生成器等一系列对源程序进行处理的过程。</li><li>人们可以将编译系统看作一系列过滤器的连接体,按照管道-过滤器的体系结构进行设计。</li><li>此外,这种体系结构在其它一些领域也有广泛的应用。因此它成为软件工程和软件开发中的一个突出的研究领域。</li><li>举例：unix的shell脚本、传统编译器</li></ul><p>2）<strong>面向对象</strong>（Object-Oriented）</p><ul><li>适用于主要问题是识别和保护信息的相关主体。 数据代理和它们相关的操作封装在一个抽象数据类型里面。</li><li>举例：java，c#开发的系统</li></ul><p>3）<strong>隐式调用</strong>（Implicit Invocation）</p><ul><li>隐式调用风格的思想是构件不直接调用一个过程，而是触发或广播一个或多个事件。</li><li>基于事件的系统中的其它构件中的过程在一个或多个事件中注册，当一个事件被触发，系统自动调用在这个事件中注册的所有过程，这样，一个事件的触发就导致了另一模块中的过程的调用。</li><li>支持基于事件的隐式调用的应用系统很多。例如，在编程环境中用于集成各种工具，在数据库管理系统中确保数据的一致性约束，在用户界面系统中管理数据，以及在编辑器中支持语法检查。例如在某系统中，编辑器和变量监视器可以登记相应Debugger的断点事件。当Debugger在断点处停下时，它声明该事件，由系统自动调用处理程序，如编辑程序可以卷屏到断点，变量监视器刷新变量数值。而Debugger本身只声明事件，并不关心哪些过程会启动，也不关心这些过程做什么处理。</li><li>举例：数据库管理系统中执行完整性约束（触发器）。<br> 在用户界面中用于将数据表示与管理该数据的应用程序分离。</li></ul><p>4）<strong>客户-服务器风格</strong></p><ul><li>客户服务器方式（简称C/S方式），为网络边缘的系统中运行的程序之间的一种通信方式。描述的是进程之间服务和被服务的关系，客户是服务请求方，服务器是服务提供方。客户服务器模式是一种分布式系统体系结构。</li><li>客户（client）和服务器（server）都是指通信中所涉及的两个应用程序。客户服务器方式描述的是进程之间服务和被服务的关系。这里所说的客户和服务器都指的是计算机进程（软件）。在C/S方式中，请求一方为客户，响应请求一方称为服务器，如果一个服务器在响应客户请求时不能单独完成任务，还可能向其他服务器发出请求，这时，发出请求的服务器就成为另一个服务器的客户。从双方建立联系的方式来看，主动启动通信的应用叫客户，被动等待通信的应用叫服务器。这里最主要的特征就是：客户是服务请求方，服务器是服务提方。</li><li>举例：文件服务器、数据库服务器、对象服务器</li></ul><p>5）<strong>分层风格</strong></p><ul><li>把应用的关注点分割为堆栈组（层）。</li><li>适用于涉及到分布式的能够分层的组织的类的服务，每层给它的上一层提供服务，同时作为下一层的客户端，只有仔细地从内层选择选择过程，才能用于他们临近的外层。</li><li>分层架构的一个重要原则是：每层只能与位于其下方的层发生耦合。分层架构也分为几种：在严格分层架构中，某层只能与直接位于其下方的层发生耦合；而松散分层架构则允许任意上方层与任意下方层发生耦合。由于用户界面层和应用服务通常需要与基础设施打交道，许多系统都是基于松散分层架构的。</li><li>举例：分层通信协议、操作系统</li></ul><p>6）<strong>仓库风格</strong></p><ul><li>适用于主要问题是建立、增加和维护复杂信息的主体部分，信息一定要能够用很多种方式操作。经常需要长期的存在。</li><li>优点：有效存储大量数据、共享式模式模型、集中式管理</li><li>缺点：必须先达成一个数据模型、很难分配数据、数据升级很昂贵</li><li>举例：信息系统、编程环境、图形编辑器、人工智能知识基础、逆向工程系统</li></ul><p>7）<strong>解释程序风格</strong></p><ul><li>解释程序是一种语言处理程序，在词法、语法和语义分析方面与编译程序的工作原理基本相同，但在运行用户程序时，它直接执行源程序或源程序的内部形式(中间代码)。因此，解释程序并不产生目标程序，这是它和编译程序的主要区别。</li><li>适用于执行 解决方案的最合适的语言 或是 机器不是直接可用的。</li><li>举例：编程语言编译器、基于规则的系统、脚本语言</li></ul><p>8）<strong>过程控制风格</strong></p><ul><li>适用于目的是维护特殊过程的输出属性在给定参考值的情形下</li><li>举例：实时系统软件用来控制（核电站、汽车巡航控制）</li></ul><p>补充内容：<br> <strong>分布式系统</strong>（distributed system）是建立在网络之上的软件系统。分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据。</p><h3 id="架构设计分几个层次"><a href="#架构设计分几个层次" class="headerlink" title="架构设计分几个层次"></a>架构设计分几个层次</h3><h4 id="三层系统的分层式结构"><a href="#三层系统的分层式结构" class="headerlink" title="三层系统的分层式结构"></a>三层系统的分层式结构</h4><p>  三层架构(3-tier architecture) 通常意义上的三层架构就是将整个业务应用划分为：</p><ul><li><p>表现层（UI）</p></li><li><p>业务逻辑层（BLL）</p></li><li><p>数据访问层（DAL）</p><p><strong>区分层次的目的即为了“高内聚，低耦合”的思想。</strong></p></li></ul><ol><li>表现层（UI）：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。</li><li>业务逻辑层（BLL）：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。</li><li>数据访问层（DAL）：该层所做事务直接操作数据库，针对数据的增添、删除、修改、查找等。</li></ol><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/311633272534920.jpg" class="" title="img"><p>在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。</p><p>微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。</p><h3 id="架构师需要的核心技能是什么"><a href="#架构师需要的核心技能是什么" class="headerlink" title="架构师需要的核心技能是什么"></a>架构师需要的核心技能是什么</h3><ul><li>团队之间的交流   Liaison with stakeholders</li><li>技术知识 Technology knowledge</li><li>软件工程学  Software engineering</li><li>风险管理 Risk managements</li></ul><h3 id="什么是软件架构（好几种定义，但是主要点是结构，元素，关系，接口）"><a href="#什么是软件架构（好几种定义，但是主要点是结构，元素，关系，接口）" class="headerlink" title="什么是软件架构（好几种定义，但是主要点是结构，元素，关系，接口）"></a>什么是软件架构（好几种定义，但是主要点是结构，元素，关系，接口）</h3><ul><li>软件架构（software architecture）是一系列相关的抽象模式，用于指导大型软件系统各个方面的设计。</li><li>软件架构是一个系统的草图。</li></ul><p>（PPT ch1-ch8 slide 3- 7）</p><ul><li>It’s about software design<br> 软件架构是软件设计过程的一部分。<br> All architecture is software design, but not all design is software architecture<br> 所有的架构都是软件设计，但不是所有的设计都是软件架构<br> Part of the design process<br> 设计过程的一部分</li><li>Simply, architecture focuses on ‘issues that will be difficult/impossible to change once the system is built’<br> 简单地说，架构关注的是“一旦构建系统，就很难/不可能更改的问题”<br> Quality attributes like security, performance<br> 质量属性，如安全性、性能<br> Non-functional requirements like cost, deployment hardware<br> 非功能性需求，如成本、部署硬件</li></ul><p>“Architecture is the fundamental organization of a system, embodied in its components, their relationships to each other and the environment, and the principles governing its design and evolution.”<br> 体系结构是一个系统的基本组织，体现在它的组件、它们彼此之间的关系和环境中，以及控制它的设计和演进的原则中。</p><p>“The software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them.”<br> 程序或计算系统的软件架构是 系统的一个或多个结构，<br> 它包括 软件元素、这些元素的外部可见属性 和 它们之间的关系。</p><h3 id="软件架构主要关注那些问题"><a href="#软件架构主要关注那些问题" class="headerlink" title="软件架构主要关注那些问题"></a>软件架构主要关注那些问题</h3><p>‘issues that will be difficult/impossible to change once the system is built’<br> “一旦系统建立后就很难或是不可能改变的问题”:<br> Quality attributes like security, performance<br> 质量属性,例如 安全性 , 性能<br> Non-functional requirements like cost, deployment hardware<br> 非功能性需求,像开销, 硬件配置</p><h3 id="什么是架构风格"><a href="#什么是架构风格" class="headerlink" title="什么是架构风格"></a>什么是架构风格</h3><p>软件体系结构风格是描述某一特定 应用领域 中 系统组织方式 的 惯用模式。</p><p>体系结构风格定义一个系统家族，即一个体系结构定义一个词汇表和一组约束。词汇表中包含一些构件和连接件类型，而这组约束指出系统是如何将这些构件和连接件组合起来的。</p><h3 id="什么是架构视图"><a href="#什么是架构视图" class="headerlink" title="什么是架构视图"></a>什么是架构视图</h3><p>架构视图：</p><ul><li>对于从 某一视角 或 某一点 上看到的系统所做的 简化描述 ，</li><li>描述中涵盖了系统的 某一特定方面 ，而省略了此方面无关的 实体 。</li></ul><h2 id="9-16"><a href="#9-16" class="headerlink" title="9~16"></a>9~16</h2><h3 id="软件系统中的复杂性有哪些种类"><a href="#软件系统中的复杂性有哪些种类" class="headerlink" title="软件系统中的复杂性有哪些种类"></a>软件系统中的复杂性有哪些种类</h3><h3 id="非功能需求包括哪些（三种）"><a href="#非功能需求包括哪些（三种）" class="headerlink" title="非功能需求包括哪些（三种）"></a>非功能需求包括哪些（三种）</h3><p>NFRs（Non-functional requirements）:非功能性需求:</p><ul><li>Technical constraints 技术约束</li><li>Business constraints 业务约束</li><li>Quality attributes 质量属性<br> 是对整个系统性能等方面的 评估和验证<br> (来源PPT 12)</li></ul><h3 id="软件架构过程（三个迭代步骤）"><a href="#软件架构过程（三个迭代步骤）" class="headerlink" title="软件架构过程（三个迭代步骤）"></a>软件架构过程（三个迭代步骤）</h3><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/webp.png" class="" title="软件架构过程"><p>1）<strong>确定架构需求</strong>：架构上重要的需求（结构用例）—基本的质量和系统的非功能性需求<br> 2）<strong>架构设计</strong>：迭代的设计步骤—风险识别是一个重要的输出设计<br> 3）<strong>结构验证</strong>：</p><ul><li>验证阶段—验证阶段的目的是增加信心的设计团队的架构是适合的目的；</li><li>验证必须实现在项目时间和预算的约束，关键是要尽可能严格的和有效的；</li><li>验证一个架构设计提出了严峻的挑战，因为这是一个设计不能执行或测试，包括新和COTS组件集成；<br> (来源 doc ppt202)</li></ul><h3 id="软件质量属性主要包括哪些（五种）"><a href="#软件质量属性主要包括哪些（五种）" class="headerlink" title="软件质量属性主要包括哪些（五种）"></a>软件质量属性主要包括哪些（五种）</h3><ul><li>Reliability <strong>可靠性</strong>：<br> <em>可靠性参数：平均故障间隔时间（MTBF），顾名思义，是硬件模块故障之间的平均时间。它是制造商在硬件模块发生故障之前估计的平均时间。<br> FITS是表示MTBF的更直观的方式。FITS只是十亿小时（即1000,000,000小时）内模块的故障总数。</em></li><li>Availability <strong>可用性</strong>：<br> <em>衡量系统的可用性可以用公式 MTBF／(MTBF+MTTR)，其中MTBF为系统出错的时间间隔也就是平均正常工作时间，而MTTR表示系统修复错误用的时间。当然上面的公式计算出的结果越大表示系统的可用性越好。</em></li><li>Portability <strong>可移植性</strong>：跨平台</li><li>Scalability <strong>可伸缩性</strong>：扩展的弹性</li><li>Performance (!) <strong>性能</strong>：快</li></ul><p><strong>ppt1-8 116页</strong></p><h3 id="软件可用性取决于（三种时间）"><a href="#软件可用性取决于（三种时间）" class="headerlink" title="软件可用性取决于（三种时间）"></a>软件可用性取决于（三种时间）</h3><p>Time to detect failure 故障 <strong>检测</strong> 时间</p><p>Time to correct failure <strong>纠正</strong> 失败时间</p><p>Time to restart application <strong>重新启动</strong> 应用程序时间<br> (PPT 146页)</p><h3 id="伸缩性涉及那些方面（四种）"><a href="#伸缩性涉及那些方面（四种）" class="headerlink" title="伸缩性涉及那些方面（四种）"></a>伸缩性涉及那些方面（四种）</h3><ul><li>伸缩性定义：(来源 <strong>百度百科</strong>) 可伸缩性/可扩展性(Scalable/scalability)</li><li>可伸缩性(可扩展性)是一种对软件系统计算处理能力的设计指标，高可伸缩性代表一种<strong>弹性</strong>，在系统扩展成长过程中，软件能够保证旺盛的生命力，通过很少的改动甚至只是硬件设备的添置，就能实现整个系统处理能力的线性增长，实现高吞吐量和低延迟高性能。</li><li>可伸缩性和纯粹性能调优有本质区别， 可伸缩性是高性能、低成本和可维护性等诸多因素的综合考量和平衡，可伸缩性讲究平滑线性的性能提升，更侧重于系统的水平伸缩，通过廉价的服务器实现分布式计算；而普通性能优化只是单台机器的性能指标优化。他们共同点都是根据应用系统特点在吞吐量和延迟之间进行一个侧重选择，当然水平伸缩分区后会带来CAP定理约束。</li><li>纵向的可伸缩性——在同一个逻辑单元内增加资源来提高处理能力。这样的例子包括在现有服务器上增加CPU，或者在现有的RAID/SAN存储中增加硬盘来提高存储量。</li><li>横向的可伸缩性——增加更多逻辑单元的资源，并令它们像是一个单元一样工作。大多数集群方案、分布式文件系统、负载平衡都是在帮助你提高横向的可伸缩性</li></ul><p>1）Request load <strong>请求负载</strong><br> 当同步请求负载增长时，100个tps应用程序的行为如何?如。<br> 每秒100到1000个请求?<br> 理想的解决方案，无需额外的硬件容量:<br> 随着负载的增加，吞吐量保持不变(即100 tps)，每个请求的响应时间只线性增加(即10秒)。</p><p>2）Connections  <strong>连接</strong><br> 如果与应用程序同时连接的数量增加，会发生什么情况呢<br> 如果每个连接都消耗资源?<br> 超过连接的最大数量?<br> ISP的例子:<br> 每个用户连接生成一个新进程<br> 每个服务器上的虚拟内存超过2000个用户<br> 需要支持100k用户</p><p>3）Data size <strong>数据大小</strong><br> 当应用程序处理的数据增大时，它的行为如何?<br> 聊天应用程序平均消息大小翻倍?<br> 数据库表大小从100万行增长到2000万行?<br> 图像分析算法处理100MB而不是1MB的图像?<br> 应用程序/算法能否扩展以处理增加的数据需求?</p><p>4）Deployments <strong>部署</strong><br> 安装/部署应用程序的工作量如何随着安装基数的增长而增加?<br> 安装新用户?<br> 安装新的服务器?<br> 解决方案通常围绕自动下载/安装<br> 例如从互联网下载应用程式<br> <strong>ppt1-8 127页</strong></p><h3 id="吞吐率指标"><a href="#吞吐率指标" class="headerlink" title="吞吐率指标"></a>吞吐率指标</h3><p><strong>PPT 120</strong><br> Measure of the amount of work an application must perform in unit time<br> 度量应用程序在单位时间内必须执行的工作量</p><ul><li>Transactions per second 每秒事务数</li><li>Messages per minute 每分钟的消息</li></ul><p><strong>PPT 121</strong><br> Throughput of a message queuing system ：<br> 消息队列系统的吞吐量</p><ul><li>Messages per second (msp) 每秒的信息</li><li>Maximum sustainable throughput (MST) 最大可持续吞吐量</li></ul><h3 id="架构元素的通信包括哪些"><a href="#架构元素的通信包括哪些" class="headerlink" title="架构元素的通信包括哪些"></a>架构元素的通信包括哪些</h3><p>（PPT ch1-ch8 slide210、212、218）</p><ul><li>Synchronous communications 同步通信</li><li>Asynchronous communications 异步通信</li><li>Flexible communications 灵活通信</li></ul><p>（PPT ch1-ch8 10）<br> Architecture Specifies Component Communication 体系结构指定组件通信<br> Communication involves: 架构元素的通信：</p><p>Data passing mechanisms 数据传递机制：</p><ul><li>Function call 函数调用</li><li>Remote method invocation 远程方法调用</li><li>Asynchronous message 异步消息</li></ul><p>Control flow 控制流</p><ul><li>Flow of messages between components to achieve required functionality<br> 组件之间的消息流来实现需要的功能</li><li>Sequential 顺序</li><li>Concurrent/parallel 并发/并行</li><li>Synchronization 同步</li></ul><h2 id="17-24"><a href="#17-24" class="headerlink" title="17~24"></a>17~24</h2><h3 id="各种架构风格的组件和连接器是什么"><a href="#各种架构风格的组件和连接器是什么" class="headerlink" title="各种架构风格的组件和连接器是什么"></a>各种架构风格的组件和连接器是什么</h3><p>1）<strong>管道和过滤器架构风格</strong>PPT 40页<br> <strong>组件</strong>：称为过滤器，应用于对局部的输入流的转换，经常增长的计算，因此，在输入结束前输出就开始了。<br> <strong>连接器：</strong>称为管道，给流提供管道，把一个过滤器的输出传输到另一个输入。</p><p>2）<strong>面向对象风格</strong> PPT49页<br> <strong>组件</strong>：对象<br> <strong>连接器：</strong>功能和过程调用（方法）</p><p>3）<strong>隐式调用风格</strong><br> <strong>组件</strong>：模块（？？？）<br> <strong>连接器：</strong>广播系统<br> <em>隐式调用系统中的连接器除了<br> 事件通知  过程调用  之间的绑定外，<br> 通常还包括  传统的过程调用</em></p><p>4）<strong>客户-服务器风格</strong> PPT64页<br> <strong>组件</strong>：服务器：标准独立的组件提供特别的服务，如打印，数据管理等。客户端：组件调用服务器提供的服务。<br> <strong>连接器</strong>：网络，允许客户端访问远程服务器。</p><p>5）<strong>分层风格</strong> PPT72页<br> <strong>组件</strong>：典型的过程的集合。<br> <strong>连接器</strong>：典型的在有限的可见性下的过程调用</p><p>6）<strong>仓库风格</strong> PPT80页<br> <strong>组件</strong>：<br> 表示系统正确状态的中心数据结构。<br> <em>A central data structure representing the correct state of the system.</em><br> 操作中心数据结构的独立组件的集合。<br> <em>A collection of independent components that operate on the central data structure.</em><br> <strong>连接器</strong>：典型地过程调用或是直接内存访问</p><p>7）<strong>解释程序风格</strong> PPT87页<br> <strong>组件</strong>：<br> 包括执行引擎的一个状态机和三个内存:<br> <em>include one state machine for the execution engine and three memories:</em><br> 执行引擎的当前状态<br> <em>current state of the execution engine</em><br> 程序解释<br> <em>program being interpreted</em><br> 正在解释的程序的当前状态<br> <em>current state of the program being interpreted</em><br> <strong>连接器</strong>：<br> procedure calls 过程调用<br> direct memory accesses. 直接内存访问</p><p>8）<strong>过程控制风格</strong> PPT94页<br> <strong>组件</strong>：过程定义：包括操作一些过程变量的机制，控制算法：决定如何去操作过程变量<br> <strong>连接器</strong>： 数据流关系  data flow relations</p><h3 id="软件性能指标主要有哪几种（三种）"><a href="#软件性能指标主要有哪几种（三种）" class="headerlink" title="软件性能指标主要有哪几种（三种）"></a>软件性能指标主要有哪几种（三种）</h3><p>吞吐量、响应时间、最后期限 见第一题</p><h3 id="响应时间的度量（两种）"><a href="#响应时间的度量（两种）" class="headerlink" title="响应时间的度量（两种）"></a>响应时间的度量（两种）</h3><p>Guaranteed time 最大响应时间<br>Average time 平均响应时间</p><p><strong>PPT 122</strong></p><h3 id="安全性质量指标主要有哪几种（五种）"><a href="#安全性质量指标主要有哪几种（五种）" class="headerlink" title="安全性质量指标主要有哪几种（五种）"></a>安全性质量指标主要有哪几种（五种）</h3><ul><li><strong>Authentication:</strong> Applications can verify the identity of their users and other applications with which they communicate.<br> <strong>身份验证</strong>：应用程序可以验证他们的用户的身份和他们通信的其他应用程序。</li><li><strong>Authorization:</strong> Authenticated users and applications have defined access rights to the resources of the system.<br> <strong>授权</strong>：身份验证的用户和应用程序定义了系统资源的访问权限。</li><li><strong>Encryption:</strong> The messages sent to/from the application are encrypted.<br> <strong>加密</strong>：从应用程序发送到/从应用程序的消息是加密的。</li><li><strong>Integrity:</strong> This ensures the contents of a message are not altered in transit.<br> <strong>完整性</strong>：确保在传输过程中不会改变消息的内容。</li><li><strong>Non-repudiation:</strong> The sender of a message has proof of delivery and the receiver is assured of the sender’s identity. This means neither can subsequently refute their participation in the message exchange.<br> <strong>不可否认性</strong>：消息的发送方有交付证明，接收方可以确定发送方的身份。这意味着，双方随后都不能否认他们参与了信息交换。</li></ul><p><strong>PPT 142页</strong></p><h3 id="实现高可用性的策略（三种）"><a href="#实现高可用性的策略（三种）" class="headerlink" title="实现高可用性的策略（三种）"></a>实现高可用性的策略（三种）</h3><ul><li>Eliminate single points of failure <strong>消除单点故障</strong><br> <em>是指一个系统的这样一个部件，如果它失效或停止运转，将会导致整个系统不能工作。我们当然不希望看到，在一个要求高度可用性的系统中存在这样的部分，但这种情况在网络，软件应用以及其它工业系统中都存在。</em></li><li>Replication and failover        <strong>复制和故障转移</strong><br> <em>failover n. 失效备援（为系统备援能力的一种，当系统中其中一项设备失效而无法运作时，另一项设备即可自动接手原失效系统所执行的工作）</em></li><li>Automatic detection and restart <strong>自动检测和重新启动</strong></li></ul><p><strong>PPT 146</strong></p><h3 id="信息隐藏原理"><a href="#信息隐藏原理" class="headerlink" title="信息隐藏原理"></a>信息隐藏原理</h3><p><strong>PPT lecture 9 88页</strong></p><ul><li>信息隐藏指在设计和确定模块时，使得一个模块内包含的特定信息（过程或数据），对于不需要这些信息的其他模块来说，是不可访问的。</li><li>信息隐藏（封装）主要是为了提高软件的可重用性和可维护性。信息隐藏造成了系统各个部分耦合性低。系统是由各个部分构成的，如果这些部分耦合性低的话，那么这个系统开发、维护等就较容易。</li><li>假设A打算秘密传递一些信息给B，A需要从一个随机消息源中随机选取一个无关紧要的消息C，当这个消息公开传递时，不会引起人们的怀疑，称这个消息为载体对象（Cover Message）C；把秘密信息（Secret Message）M隐藏到载体对象C中，此时，载体对象就变成了伪装对象C1.载体对象C是正常的，不会引起人们的怀疑，伪装对象C1与载体对象C无论从感官（比如感受图像、视频的视觉和感受声音、音频的听觉）上，还是从计算机的分析上，都不可能把他们区分开来，而且对伪装对象C1的正常处理，不应破坏隐藏的秘密信息。这样就实现了信息的隐藏传输。秘密信息的嵌入过程可能需要密钥，也可能不需要密钥，为了区别于加密的密钥，信息隐藏的密钥称为伪装密钥k。</li></ul><p>信息隐藏涉及两个算法：信息嵌入算法和信息提取算法，如下图：<br> 信息隐藏的原理框图</p><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/data.png" class="" title="信息隐藏"><h3 id="什么是关注点，关注点的类型，关注点分离"><a href="#什么是关注点，关注点的类型，关注点分离" class="headerlink" title="什么是关注点，关注点的类型，关注点分离"></a>什么是关注点，关注点的类型，关注点分离</h3><p>SoC <code>Separation of Concerns</code> 是将软件分解为不同功能的过程，这些功能封装了可被其他类使用的独特行为和数据。 通常，关注点表示类的功能或行为。将程序分离成离散职责的行为显著地提高了代码重用、维护和可测试性。<br> 在软件系统中，有两种主要的关注点类型：</p><ul><li>核心关注点 <code>Core concern</code> ：它代表了系统基本的功能，并且是编写软件的主要原因。</li><li>横切关注点 <code>Cross-cutting concern</code> ：这是应用程序中依赖并影响其他关注点的一个方面。</li></ul><p>关注点分离（Separation of concerns，SOC）</p><p> 表示、业务和数据处理逻辑清楚地划分在不同的层中。</p><p> 1）大体思路是,先将复杂问题做合理的分解,再分别仔细研究问题的不同侧面(关注点)，最后综合各方面的结果，合成整体的解决方案。<br> 2）是对只与“特定概念、目标”(关注点)相关联的软件组成部分进行“标识、封装和操纵”的能力，即标识、封装和操纵关注点的能力。是处理复杂性的一个原则。由于关注点混杂在一起会导致复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法。</p><p>关注点分离是面向方面的[程序设计]的核心概念。分离关注点使得解决特定领域问题的代码从业务逻辑中独立出来，业务逻辑的代码中不再含有针对特定领域问题代码的调用(将针对特定领域问题代码抽象化成较少的程式码，例如将代码封装成function或是class)，业务逻辑同特定领域问题的关系通过侧面来封装、维护，这样原本分散在在整个应用程序中的变动就可以很好的管理起来。<br> <strong>百度百科</strong></p><h3 id="什么是职责驱动的设计"><a href="#什么是职责驱动的设计" class="headerlink" title="什么是职责驱动的设计"></a>什么是职责驱动的设计</h3><p>Responsibility-Driven Design (RDD)</p><ul><li>Detailed object design is usually done from the point of view of the metaphor of:<br> 详细的对象设计通常是从隐喻的角度进行的:<br> 1.Objects have responsibilities<br> 对象有责任<br> 2.Objects collaborate<br> 合作对象</li><li>Responsibilities are an abstraction.<br> 责任是抽象的。<br> 1.The responsibility for persistence.<br> 坚持的责任。<br> Large-grained responsibility.<br> 大粒度的责任。<br> 2.The responsibility for the sales tax calculation.<br> 负责营业税的计算。<br> More fine-grained responsibility.<br> 更细粒度的责任。<br> <strong>ppt</strong></li><li>职责驱动设计即如何给相互协作的对象分配职责，主要关注的是职责、角色以及协作。</li><li>职业驱动设计就是职责必须匹配。<br> 什么是职责呢？简单地说，一个类或构件的职责包括两个方面：<br> 一个是知道的事，对于一个类来说就是他的属性；<br> 一个是能做的事，对于一个类来说就是他的方法。<br> <strong>百度百科</strong></li></ul><h2 id="25-32"><a href="#25-32" class="headerlink" title="25~32"></a>25~32</h2><h3 id="GRASP模式的具体内容，各种模式的定义，解决的什么问题"><a href="#GRASP模式的具体内容，各种模式的定义，解决的什么问题" class="headerlink" title="GRASP模式的具体内容，各种模式的定义，解决的什么问题"></a>GRASP模式的具体内容，各种模式的定义，解决的什么问题</h3><p>1）创造者 Creator<br> 分配给类B职责来创造类A的一个实例如果：<br> （1） B聚合A的对象<br> （2） B包含A的对象<br> （3） B记录A的对象的实例<br> （4） B紧密地使用A的对象<br> （5） B被创建时有初始化的数据传递给</p><p>解决方案：将创建一个类A的实例的职责指派给类B的实例，<br> 如果下列条件满足的话：<br> a) B聚合了A对象<br> b) B包含了A对象<br> c) B纪录了A对象的实例<br> d) B要经常使用A对象<br> e) 当A的实例被创建时，B具有要传递给A的初始化数据(也就是说B是创建A的实例这项任务的信息专家)<br> f) B是A对象的创建者<br> 如果以上条件中不止一条成立的话，那么最好让B聚集或包含A</p><p>通俗点就是：我要用你所以我来创建你，请不要让别人创建你<br> 这个模式是支持低耦合度原则的一个体现</p><p>2）信息专家 Information Expert<br> 在设计对象（类）时，如果某个类能够在某方面具有完整信息，足以实现某责任，就将这个责任分配给这个类，<br> 解决方案：将职责分配给具有履行职责所需要的信息的类<br> 通俗点就是：该干嘛干嘛去，别管别人的闲事或者我的职责就是搞这个，别的事不管。<br> 举个简单的例子，如果有一个类是专门处理字符串相关的类，那么这个类只能有字符串处理相关的方法，而不要将日期处理的方法加进来。也就是提高软件高内聚一种原则。</p><p>3）控制器 Controller<br> 控制器是在用户接口层上的第一个对象，负责接收和处理系统的操作信息。<br> 解决方案：将处理系统事件消息的职责分派给代表下列事物的类：<br> a) 代表整个“系统”的类（虚包控制者）<br> b) 代表整个企业或组织的类（虚包控制者）<br> c) 代表真实世界中参与职责（角色控制者）的主动对象类（例，一个人的角色）<br> d) 代表一个用况中所有事件的人工处理者类，通常用“&lt;用例名&gt;处理者”的方式命名（用例控制者）<br> 这是一个控制者角色职责分配的原则，就是哪些控制应该分派给哪个角色。</p><p>4）低耦合 Low Coupling<br> 测量存在于模块之间的依赖程度<br> 解决方案：在分配一个职责时要使保持低耦合度。<br> 耦合度(coupling)是一个类与其它类关联、知道其他类的信息或者依赖其他类的强弱程度的度量。一个具有低(弱)耦合度的类不依赖于太多的其他类。</p><p>5）高内聚 High Cohesion<br> 测量一个共享的模块内元素的相关性 ；一个单独模块执行任务的程度是功能相关的<br> 解决方案：分配一个职责的时候要保持类的高聚合度<br> 聚合度或内聚度(cohesion)是一个类中的各个职责之间相关程度和集中程度的度量。一个具有高度相关职责的类并且这个类所能完成的工作量不是特别巨大，那么他就是具有高聚合度。</p><p>6）多态 Polymorphism<br> 当相关的供选方案或行为随着类型的变化而变化时，给行为分配职责—使用多态操作—来适合行为变化的类型。<br> 也就是说尽量对抽象层编程，用多态的方法来判断具体应该使用那个类，而不是用if instanceof 来判断该类是什么接来执行什么。</p><p>7）纯虚构 Pure Fabrication<br> 分配一系列高度聚合的职责给虚假的类或是不表现某事完成的领域问题概念的有用的类，它支持高内聚、低耦合、可重用。<br> 一个纯虚构意味着虚构某些事物，而不是到了迫不得已我们才这样做。<br> 例，我们的Sale类的数据要存入数据库，但是他必须和数据库接口相连接，如果将接口连接放入Sale类中势必增加该类的耦合度，所以我们可以虚构一个类来处理与数据库接口连接的问题。这个类就是我们虚构出来的一个事物。</p><p>8）间接 Indirection<br> 问题：如何分配职责避免直接耦合？如何减弱对象的耦合？<br> 解决方案：分配职责给中间的调解对象来调解两个组件之间的关系。<br> 内容：将职责分配给一个中间对象以便在其他构件或服务之间仲裁，这样这些构件或服务没有被直接耦合。这个中间对象(intermediary)在其他构件或服务间创建一个中介者(Indirection)。这个中间对象也就事7)中的纯虚构。</p><p>9）防止编译/变化预防 Protected Variations<br> 问题：如何设计对象，子系统和系统，使其内部的变化和不稳定不会对其他元素产生不良影响？<br> 解决方案：识别设计变化或不稳定之处，分配职责用以在这些变化之外创建稳定接口<br> 内容：分配职责给一个客户端的直接对象以使它与一个间接对象进行协作，这样客户端无需知道这个间接对象。<br> 这个模式-也被叫做(Demeter)准则。<br> 通俗点就是：只与你直接的朋友们通信，不要跟“陌生人”说话，每个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位</p><p>GRASP的主要特征：</p><ul><li>对象职责分配的基本原则。</li><li>主要应用在分析和建模上。</li></ul><p>GRASP的核心思想的理解：</p><ul><li>自己干自己的事（职责的分配）</li><li>自己干自己的能干的事（职责的分配）</li><li>自己只干自己的事（职责的内聚）</li></ul><p><strong>来源 doc</strong></p><h3 id="OO设计的五个基本原则及课件中讲述的其它软件原理（主要在Java-review-PPT中）"><a href="#OO设计的五个基本原则及课件中讲述的其它软件原理（主要在Java-review-PPT中）" class="headerlink" title="OO设计的五个基本原则及课件中讲述的其它软件原理（主要在Java review PPT中）"></a>OO设计的五个基本原则及课件中讲述的其它软件原理（主要在Java review PPT中）</h3><p>五个基本原则：（S.O.L.I.D）:<br> 1）<strong>单一职责原则 (SPR 单一功能原则)</strong><br> 这个原则和关注点分离紧密联系。它陈述了<strong>每个对象应该只有一个理由去改变，单一聚焦在职责上</strong>。通过依附这个原则，你避免了庞大的类的设计问题，那就像瑞士的军刀。有了精确的对象，你再次增加了系统的可读性和可维护性。</p><p>2）<strong>开闭原则 (OCP 开闭原则)</strong><br> 这个原则陈述了类应该<strong>对扩展开放，对修改关闭</strong>，那样你就能够添加新的特征，扩展一个类而不用改变它内部的行为。这个原则旨在避免破坏存在的类及依赖它的其他类，这使得你的整个应用程序中产生故障和错误的涟漪。</p><p>3)<strong>Liskov替换原则 (LSP 里式替换原则)</strong><br> Liskov替换原则要求你应该能够使用任何衍生出的类代替父类，不用修改就有同样的行为。这个原则与开闭原则一致，它保证了<strong>一个衍生出的类不影响父类的行为</strong>，或者说，衍生出的类必须能够被它们的基类替代。</p><p>4)<strong>接口分离原则 (ISP 接口隔离原则)</strong><br> 这个原则是将一个抽象方法分裂成几组职责，给这些组分配接口来防止客户端实现一个很大的接口，这个接口容纳了很多它们不使用的方法。目的是为了让类使用相同的接口只需要实现一些具体的方法，而不是有很多方法的庞大的接口。<strong>不应强迫客户程序实现一个它用不上的接口。</strong></p><p>5)<strong>依赖反转原则 (DIP依赖反转原则)</strong><br> 把你的类从具体的实现中隔离开，使它们依赖于抽象类或接口。它促进了对接口而不是实现的译码，这通过保证对实现的低耦合来增加系统的灵活性。<br> <strong>高层模块不应该依赖于底层模块。二者都应该依赖于抽象</strong>。<br> <strong>抽象不应该依赖于细节，细节应该依赖于抽象</strong>。</p><p>更多解释：<br> <a href="https://blog.csdn.net/zn_echonn/article/details/80198053">https://blog.csdn.net/zn_echonn/article/details/80198053</a></p><p>【其它基本原理】<br> A.保持代码简单而不过于简单，避免不必要的复杂性；<br> B.把公共事物抽象出来，放在固定的位置；<br> C.给类分配正确的职责，告诉对象做什么，而不是询问对象的状态；<br> D.把自认为需要却不一定需要的特性延迟；<br> E.把特性分离封装成类，增强重用、维护和稳定。（关注点分离）<br> F.将类及其成员的访问性降到最小；<br> G.使用访问器和修改器，而不是公共成员；<br> H.组合优于继承；<br> I.面向接口编程，而不是实现。</p><ul><li>面向抽象原则<br> 设计一个类时，不让该类面向具体的类，而是面向抽象类或接口</li><li>高内聚-低耦合原则<br> 如果类中的方法是一组相关的行为，则称该类是高内聚的，反之称为低内聚的。 所谓低耦合就是尽量不要让一个类含有太多的其它类的实例的引用，以避免修改系统的其中一部分会影响到其它部分。</li></ul><h3 id="组合，继承，针对接口编程，黑盒，白盒重用"><a href="#组合，继承，针对接口编程，黑盒，白盒重用" class="headerlink" title="组合，继承，针对接口编程，黑盒，白盒重用"></a>组合，继承，针对接口编程，黑盒，白盒重用</h3><p>1）组合：<br> 指在新类里面创建原有类的对象，重复利用已有类的功能。</p><p>优点：<br> 包含对象由包含类通过其接口访问<br> “黑盒”重用，因为包含对象的内部细节不可见</p><ul><li>良好的封装</li><li>更少的实现依赖性</li><li>每个类只关注一个任务</li><li>可以在运行时通过获取对相同类型的其他对象的引用的对象来动态地定义组合<br> 缺点：<br> 结果系统往往有更多的对象<br> 接口必须仔细定义，以便使用许多不同的对象作为组合块</li></ul><p>2）继承：</p><p>新功能的重用方法获得通过扩展现有对象的实现   <strong>？？？</strong><br> 继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力。<br> 泛化类(超类)明确了共同的属性和方法<br> 专业类(子类)扩展了实现额外的属性和方法</p><p>优点：<br> 新的实现很容易，因为它的大部分是继承的<br> 容易修改或扩展的实现被重用<br> 缺点：<br> 打破封装，因为它暴露一个子类到其超类的实现细节<br> “白盒”重用，因为超类的内部细节对子类通常是可见的<br> 如果超类的实现更改，则可能必须更改子类<br> 从超类继承的实现不能在运行时更改</p><p>3）针对接口编程又称为面向接口编程，</p><p>针对接口编程就是要先设计以系列的接口，把设计和实现分开，使用时只需要引用接口即可，也由于系统各部分的解耦合。针对接口编程是为了提高程序的可维护性、可伸缩性和可复用性。如果你在一个类中直接使用另外的一个，这样就把两个类紧密联系在一起了，以后如果想做出改变就很难了。如果针对接口编程，当业务变化时我们只需要用一个新的类实现接口即可</p><p>优点：<br> 客户端不知道他们正在使用的对象的特定类<br> 一个对象可以很容易地被另一个替换<br> 对象连接不需要硬连线到特定类的对象，从而增加了灵活性<br> 松耦合<br> 增加重复使用的可能性<br> 改进合成的机会，因为包含的对象可以是实现特定接口的任何类<br> 缺点：<br> 适度增加设计复杂性</p><p>4）白盒复用：<br> 源代码可见，可修改和扩展<br> – 复制已有代码当正在开发的系统，进行修改<br> – 可定制化程度高<br> – 对其修改增加了软件的复杂度，且需要对其内部充分的了解</p><p>白盒重用”White-box” reuse（PPT Review of Java Slide 45）<br> “White-box” reuse, since internal details of super classes are often visible to subclasses<br> “白盒”重用，因为超类的内部细节对子类通常是可见的</p><p>5）黑盒复用：<br> 源代码不可见，不能修改<br> – 只能通过API接口来使用，无法修改代码<br> – 简单，清晰<br> – 适应性差些</p><p>黑盒重用”Black-box” reuse（PPT Review of Java Slide 43）<br> “Black-box” reuse, since internal details of contained objects are not visible<br> 因为包含对象的内部细节不可见</p><ul><li>补充：<br> 组合(has-a)关系可以显式地获得被包含类（继承中称为父类）的对象，而继承(is-a)则是隐式地获得父类的对象，被包含类和父类对应，而组合外部类和子类对应。</li></ul><p>组合关系是 局部类和整体类的关系<br> 继承关系 父类和子类的关系<br> (来源doc,网络)</p><h3 id="什么是抽象，封装"><a href="#什么是抽象，封装" class="headerlink" title="什么是抽象，封装"></a>什么是抽象，封装</h3><p>封装 <code>Encapsulation</code><br> 阻止你知道，封装帮助控制偶然复杂性，尽可能地隐藏实现细节。封装意味着我们永远不希望客户端开发人员知道一个调用的操作是如何实现的。</p><p>抽象 <code>Abstraction</code></p><ul><li>忽视一个问题中与当前目的无关的那些方面的原则，以便只集中注意与当前目的有关的那些方面。</li><li>允许忽略</li></ul><h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>(来源DOC)</p><ul><li>MVC是 模型-视图-控制器 的缩写<br> <em>它代表了一种软件设计模式，1978年开发在施乐帕克研究中心(!)<br> 它解释了一种分离视觉、交互和数据组件的方法。<br> 非常受欢迎,广泛用于Java和其他语言</em></li></ul><p>（百度百科）</p><ul><li>Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。<br> 通常模型对象负责在数据库中存取数据。</li><li>View（视图）是应用程序中处理数据显示的部分。<br>通常视图是依据模型数据创建的。</li><li>Controller（控制器）是应用程序中处理用户交互的部分。<br>通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</li></ul><p><strong>模型</strong> ：维护应用程序的状态和数据的XML文档</p><ul><li>“模型”包含的数据</li><li>有一些方法来访问并可能更新它的内容。</li><li>通常,它实现了一个允许模型交互的接口。</li><li>实现了一个允许退出和取代的接口，并不伴随编程改变</li></ul><p><strong>视图</strong> ：XML文档的呈现</p><ul><li>视图提供模型的可视化表示。</li><li>在任何时候都可以有多个视图表示模型。</li><li>例如,一个公司财务状况随着时间的推移可以用一个表和图表示。</li><li>只有两种不同的视图表示相同的数据。</li><li>当模型更新时，所有视图被通知然后有机会更新</li></ul><p><strong>控制器</strong> ：用户界面呈现给用户操作的应用程序</p><ul><li>用户与控制器进行交互。</li><li>它解释鼠标移动,点击按键等</li><li>活动与模型沟通，如:删除行,插入行等</li><li>它的模型的交互间接导致视图的更新</li></ul><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/pic.png" class="" title="动态特性"><h3 id="企业应用架构有那三层，各层主要做什么。在各层有那些主要的模式，各层的各种模式的定义和结构内容（展现层，领域层，数据源层）"><a href="#企业应用架构有那三层，各层主要做什么。在各层有那些主要的模式，各层的各种模式的定义和结构内容（展现层，领域层，数据源层）" class="headerlink" title="企业应用架构有那三层，各层主要做什么。在各层有那些主要的模式，各层的各种模式的定义和结构内容（展现层，领域层，数据源层）"></a>企业应用架构有那三层，各层主要做什么。在各层有那些主要的模式，各层的各种模式的定义和结构内容（展现层，领域层，数据源层）</h3><p>（PPT ch9 slide 110）<br> 1）表现层：提供服务，显示信息。页面控制器，模板视图，前端控制器，转换视图。<br> 2）领域层：领域逻辑，领域中真正的核心。也称为业务逻辑，它是应用程序必须做的所有领域相关工作：包括根据输入数据和已有数据进行计算，对从表现层输入的数据进行验证以及根据从表现层接受的命令来确定应该调试哪些数据源逻辑。事物脚本，领域模型，表模块，活动记录。<br> 3）数据源层：与数据库、系统消息系统、事务管理器及其他软件包进行通信。最主要的数据源逻辑就是数据库，主要责任是存储持久数据。行数据网关，表数据网关，数据映射程序，表模块，活动记录。</p><h3 id="Larman的敏捷UP设计方法的具体步骤（Larman’s-Design-Process）"><a href="#Larman的敏捷UP设计方法的具体步骤（Larman’s-Design-Process）" class="headerlink" title="Larman的敏捷UP设计方法的具体步骤（Larman’s Design Process）"></a>Larman的敏捷UP设计方法的具体步骤（Larman’s Design Process）</h3><h3 id="4-1视图"><a href="#4-1视图" class="headerlink" title="4+1视图"></a>4+1视图</h3><p>“4+1”视图模型即从5个不同的视角（逻辑视图，进程视图，物理视图，开发视图<br> 和场景视图）来描述软件体系结构。<br> 每个视图之关心系统的一个侧面，5个视图结合在一起才能反映系统的软件体系结构的全部内容。</p><p>逻辑视图（Logical View）：<br> 过程视图：描述架构元素之间的并发和通信<br> 物理视图：描绘主要的过程和组件是如何映像到硬件上的<br> 开发视图：俘获软件组件内部的结构，如配置管理工具</p><p>架构用例：俘获架构的需求；和不止一种视图相关</p><p><strong>百度百科</strong><br> 逻辑视图（Logical View）设计的对象模型（使用[面向对象]的设计方法时）。<br> 过程视图（Process View）捕捉设计的并发和同步特征。<br> 物理视图（Physical View）描述了软件到硬件的映射，反映了分布式特性。<br> 开发视图（Development View）描述了在[开发环境]中软件的静态组织结构。</p><p>架构的描述，即所做的各种决定，可以围绕着这四个视图来组织，然后由一些用例 （use cases）或场景(scenarios)来说明，从而形成了第五个视图。</p><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/webp-1703311398704-12.png" class="" title="四加一视图"><h2 id="33-35"><a href="#33-35" class="headerlink" title="33~35"></a>33~35</h2><h3 id="应用的集成策略"><a href="#应用的集成策略" class="headerlink" title="应用的集成策略"></a>应用的集成策略</h3><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/webp-1703311427763-16.png" class="" title="应用的集成策略"><ul><li>Data – expose application data for access by other components<br> 公开应用程序数据供其他组件访问</li><li>API – offers services to read/write application data through an abstracted interface<br> 即数据——公开应用程序数据访问的其他组件，提供服务来读/写应用程序数据通过一个抽象接口</li></ul><p><em>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</em></p><p><strong>来源DOC</strong></p><p>补充内容：<br> 1.一些指标</p><ul><li>Performance：Application performance must provide sub-four second response times for 90% of requests.<br> 性能:应用程序性能人工跑道跑四秒的响应时间必须提供90%的请求。</li><li>Security: All communications must be authenticated and encrypted using certificates.<br> 安全性:所有通信都必须使用证书进行身份验证和加密。</li><li>Resource Management：The server component must run on a low end office-based server with 512MB memory.<br> 资源管理:服务器组件必须运行在一个低端办公室服务器512 mb内存。</li><li>Usability：The user interface component must run in an Internet browser to support remote users.<br> 可用性:用户界面组件必须运行在一个网络浏览器支持远程用户。</li><li>Availability: The system must run 24x7x365, with overall availability of 0.99.<br> 有效性:系统必须运行24x7x365，总体可用性为0.99。</li><li>Reliability：No message loss is allowed, and all message delivery outcomes must be known with 30 seconds<br> 可靠性:没有信息损失是允许的,和所有的消息传递的结果必须是已知的30秒</li><li>Scalability：The application must be able to handle a peak load of 500 concurrent users during the enrollment period.<br> 可伸缩性:应用程序必须能够处理500个并发用户的峰值负载在招生期间。</li><li>Modifiability: The architecture must support a phased migration from the current Forth Generation Language (4GL) version to a .NET systems technology solution.<br> 可修改性:体系结构必须支持从当前的第四代语言(4GL)版本到. net系统技术解决方案的阶段性迁移。</li></ul><h3 id="掌握："><a href="#掌握：" class="headerlink" title="掌握："></a>掌握：</h3><p>命令模式，状态模式，装饰模式，观察者模式，策略模式，单例模式，工厂方法模式，组合模式，适配器模式，外观模式，责任链模式的UML图和java代码</p><h4 id="命令模式-Command-Pattern"><a href="#命令模式-Command-Pattern" class="headerlink" title="命令模式(Command Pattern):"></a>命令模式(Command Pattern):</h4><h5 id="UML"><a href="#UML" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> Command <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteCommand implements Command <span class="token punctuation">{</span>    +execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Invoker <span class="token punctuation">{</span>    -command<span class="token punctuation">:</span> Command    +setCommand<span class="token punctuation">(</span>command<span class="token punctuation">:</span> Command<span class="token punctuation">)</span>    +executeCommand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Receiver <span class="token punctuation">{</span>    +action<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ConcreteCommand <span class="token arrow operator">--&gt;</span> ReceiverInvoker <span class="token arrow operator">--&gt;</span> CommandConcreteCommand <span class="token arrow operator">--&gt;</span> Invoker<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/command-mode.png" class="" title="命令模式"><h5 id="java代码"><a href="#java代码" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Implement Command interface</span><span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Concrete Command</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Receiver</span> receiver<span class="token punctuation">;</span>        <span class="token class-name">ConcreteCommand</span><span class="token punctuation">(</span><span class="token class-name">Receiver</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        receiver<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Invoker</span><span class="token keyword">class</span> <span class="token class-name">Invoker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> command<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Receiver</span><span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Perform action</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="状态模式-State-Pattern"><a href="#状态模式-State-Pattern" class="headerlink" title="状态模式(State Pattern):"></a>状态模式(State Pattern):</h4><h5 id="UML-1"><a href="#UML-1" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> State <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +handle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteStateA implements State <span class="token punctuation">{</span>    +handle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteStateB implements State <span class="token punctuation">{</span>    +handle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Context <span class="token punctuation">{</span>    -state<span class="token punctuation">:</span> State    +request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ConcreteStateA <span class="token arrow operator">--&gt;</span> StateConcreteStateB <span class="token arrow operator">--&gt;</span> StateConcreteStateA <span class="token arrow operator">--&gt;</span> ContextConcreteStateB <span class="token arrow operator">--&gt;</span> Context<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/state-pattern.png" class="" title="状态模式"><h5 id="java代码-1"><a href="#java代码-1" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// State interface</span><span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Concrete States</span><span class="token keyword">class</span> <span class="token class-name">ConcreteStateA</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Handle state A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ConcreteStateB</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Handle state B</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Context</span><span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">State</span> state<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="装饰模式-Decorator-Pattern"><a href="#装饰模式-Decorator-Pattern" class="headerlink" title="装饰模式(Decorator Pattern):"></a>装饰模式(Decorator Pattern):</h4><h5 id="UML-2"><a href="#UML-2" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> Component <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteComponent implements Component <span class="token punctuation">{</span>    +operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Decorator implements Component <span class="token punctuation">{</span>    -component<span class="token punctuation">:</span> Component    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteDecoratorA implements Decorator <span class="token punctuation">{</span>    +operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteDecoratorB implements Decorator <span class="token punctuation">{</span>    +operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ConcreteDecoratorA <span class="token arrow operator">--&gt;</span> DecoratorConcreteDecoratorB <span class="token arrow operator">--&gt;</span> DecoratorDecorator <span class="token arrow operator">--&gt;</span> ComponentConcreteDecoratorA <span class="token arrow operator">--&gt;</span> ConcreteComponentConcreteDecoratorB <span class="token arrow operator">--&gt;</span> ConcreteComponent<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/decorator-pattern.png" class="" title="装饰模式"><h5 id="java代码-2"><a href="#java代码-2" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Component interface</span><span class="token keyword">interface</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Concrete Component</span><span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Perform operation</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Decorator interface</span><span class="token keyword">interface</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment">// Additional methods if needed</span><span class="token punctuation">}</span><span class="token comment">// Concrete Decorators</span><span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorA</span> <span class="token keyword">implements</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Component</span> component<span class="token punctuation">;</span>        <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Additional operation</span>        component<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorB</span> <span class="token keyword">implements</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Component</span> component<span class="token punctuation">;</span>        <span class="token class-name">ConcreteDecoratorB</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Additional operation</span>        component<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="观察者模式-Observer-Pattern"><a href="#观察者模式-Observer-Pattern" class="headerlink" title="观察者模式(Observer Pattern):"></a>观察者模式(Observer Pattern):</h4><h5 id="UML-3"><a href="#UML-3" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> Observer <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteObserverA implements Observer <span class="token punctuation">{</span>    +update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteObserverB implements Observer <span class="token punctuation">{</span>    +update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Subject <span class="token punctuation">{</span>    <span class="token arrow operator">-o</span>bservers<span class="token punctuation">:</span> List&lt;Observer&gt;    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +attach<span class="token punctuation">(</span>observer<span class="token punctuation">:</span> Observer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +detach<span class="token punctuation">(</span>observer<span class="token punctuation">:</span> Observer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +notifyObservers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteSubject implements Subject <span class="token punctuation">{</span>    +attach<span class="token punctuation">(</span>observer<span class="token punctuation">:</span> Observer<span class="token punctuation">)</span>    +detach<span class="token punctuation">(</span>observer<span class="token punctuation">:</span> Observer<span class="token punctuation">)</span>    +notifyObservers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ConcreteObserverA <span class="token arrow operator">--&gt;</span> ObserverConcreteObserverB <span class="token arrow operator">--&gt;</span> ObserverConcreteObserverA <span class="token arrow operator">--&gt;</span> ConcreteSubjectConcreteObserverB <span class="token arrow operator">--&gt;</span> ConcreteSubjectConcreteSubject <span class="token arrow operator">--&gt;</span> Observer<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/observer-pattern.png" class="" title="观察者模式"><h5 id="java代码-3"><a href="#java代码-3" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">// Observer interface</span><span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Concrete Observers</span><span class="token keyword">class</span> <span class="token class-name">ConcreteObserverA</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Update logic for Observer A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ConcreteObserverB</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Update logic for Observer B</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Subject interface</span><span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Concrete Subject</span><span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="策略模式-Strategy-Pattern"><a href="#策略模式-Strategy-Pattern" class="headerlink" title="策略模式(Strategy Pattern):"></a>策略模式(Strategy Pattern):</h4><h5 id="UML-4"><a href="#UML-4" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> Strategy <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +algorithm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteStrategyA implements Strategy <span class="token punctuation">{</span>    +algorithm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteStrategyB implements Strategy <span class="token punctuation">{</span>    +algorithm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Context <span class="token punctuation">{</span>    -strategy<span class="token punctuation">:</span> Strategy    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +setStrategy<span class="token punctuation">(</span>strategy<span class="token punctuation">:</span> Strategy<span class="token punctuation">)</span>    +execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ConcreteStrategyA <span class="token arrow operator">--&gt;</span> StrategyConcreteStrategyB <span class="token arrow operator">--&gt;</span> StrategyConcreteStrategyA <span class="token arrow operator">--&gt;</span> ContextConcreteStrategyB <span class="token arrow operator">--&gt;</span> Context<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/strategy-pattern.png" class="" title="策略模式"><h5 id="java代码-4"><a href="#java代码-4" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Strategy interface</span><span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">algorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Concrete Strategies</span><span class="token keyword">class</span> <span class="token class-name">ConcreteStrategyA</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">algorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Implement algorithm A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ConcreteStrategyB</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">algorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Implement algorithm B</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Context</span><span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Strategy</span> strategy<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        strategy<span class="token punctuation">.</span><span class="token function">algorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单例模式-Singleton-Pattern"><a href="#单例模式-Singleton-Pattern" class="headerlink" title="单例模式(Singleton Pattern):"></a>单例模式(Singleton Pattern):</h4><h5 id="UML-5"><a href="#UML-5" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">class</span> Singleton <span class="token punctuation">{</span>    -instance<span class="token punctuation">:</span> Singleton    <span class="token punctuation">{</span>static<span class="token punctuation">}</span> +getInstance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Singleton    -Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/singleton-pattern.png" class="" title="单例模式"><h5 id="java代码-5"><a href="#java代码-5" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Singleton class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Private constructor to prevent instantiation</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="工厂方法模式-Factory-Method-Pattern"><a href="#工厂方法模式-Factory-Method-Pattern" class="headerlink" title="工厂方法模式(Factory Method Pattern):"></a>工厂方法模式(Factory Method Pattern):</h4><h5 id="UML-6"><a href="#UML-6" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> Product <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteProductA implements Product <span class="token punctuation">{</span>    +create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteProductB implements Product <span class="token punctuation">{</span>    +create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">interface</span> Creator <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +factoryMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Product<span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteCreatorA implements Creator <span class="token punctuation">{</span>    +factoryMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Product<span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteCreatorB implements Creator <span class="token punctuation">{</span>    +factoryMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Product<span class="token punctuation">}</span>ConcreteProductA <span class="token arrow operator">--&gt;</span> ProductConcreteProductB <span class="token arrow operator">--&gt;</span> ProductConcreteProductA <span class="token arrow operator">--&gt;</span> ConcreteCreatorAConcreteProductB <span class="token arrow operator">--&gt;</span> ConcreteCreatorBConcreteCreatorA <span class="token arrow operator">--&gt;</span> CreatorConcreteCreatorB <span class="token arrow operator">--&gt;</span> Creator<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/factory-method-pattern.png" class="" title="工厂方法模式"><h5 id="java代码-6"><a href="#java代码-6" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Product interface</span><span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Concrete Products</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductA</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Create product A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductB</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Create product B</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Creator interface</span><span class="token keyword">interface</span> <span class="token class-name">Creator</span> <span class="token punctuation">{</span>    <span class="token class-name">Product</span> <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Concrete Creators</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCreatorA</span> <span class="token keyword">implements</span> <span class="token class-name">Creator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCreatorB</span> <span class="token keyword">implements</span> <span class="token class-name">Creator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组合模式-Composite-Pattern"><a href="#组合模式-Composite-Pattern" class="headerlink" title="组合模式(Composite Pattern):"></a>组合模式(Composite Pattern):</h4><h5 id="UML-7"><a href="#UML-7" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> Component <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Leaf implements Component <span class="token punctuation">{</span>    +operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Composite implements Component <span class="token punctuation">{</span>    -children<span class="token punctuation">:</span> List&lt;Component&gt;    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +operation<span class="token punctuation">(</span><span class="token punctuation">)</span>    +add<span class="token punctuation">(</span>component<span class="token punctuation">:</span> Component<span class="token punctuation">)</span>    +remove<span class="token punctuation">(</span>component<span class="token punctuation">:</span> Component<span class="token punctuation">)</span><span class="token punctuation">}</span>Leaf <span class="token arrow operator">--&gt;</span> ComponentComposite <span class="token arrow operator">--&gt;</span> ComponentLeaf <span class="token arrow operator">--&gt;</span> Composite<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/composite-pattern.png" class="" title="组合模式"><h5 id="java代码-7"><a href="#java代码-7" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">// Component interface</span><span class="token keyword">interface</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Leaf</span><span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Leaf operation</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Composite</span><span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Composite operation</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Component</span> component <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="适配器模式-Adapter-Pattern"><a href="#适配器模式-Adapter-Pattern" class="headerlink" title="适配器模式(Adapter Pattern):"></a>适配器模式(Adapter Pattern):</h4><h5 id="UML-8"><a href="#UML-8" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> Target <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Adaptee <span class="token punctuation">{</span>    +specificRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Adapter implements Target <span class="token punctuation">{</span>    -adaptee<span class="token punctuation">:</span> Adaptee    +request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Adaptee <span class="token arrow operator">--&gt;</span> TargetAdapter <span class="token arrow operator">--&gt;</span> TargetAdapter <span class="token arrow operator">--&gt;</span> Adaptee<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/adapter-pattern.png" class="" title="适配器模式"><h5 id="java代码-8"><a href="#java代码-8" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Target interface</span><span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Adaptee</span><span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Adaptee specific request</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Adapter</span><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">;</span>        <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式(Facade Pattern):"></a>外观模式(Facade Pattern):</h4><h5 id="UML-9"><a href="#UML-9" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">class</span> SubsystemA <span class="token punctuation">{</span>    +operationA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> SubsystemB <span class="token punctuation">{</span>    +operationB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> SubsystemC <span class="token punctuation">{</span>    +operationC<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Facade <span class="token punctuation">{</span>    -subsystemA<span class="token punctuation">:</span> SubsystemA    -subsystemB<span class="token punctuation">:</span> SubsystemB    -subsystemC<span class="token punctuation">:</span> SubsystemC    +operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>SubsystemA <span class="token arrow operator">--&gt;</span> FacadeSubsystemB <span class="token arrow operator">--&gt;</span> FacadeSubsystemC <span class="token arrow operator">--&gt;</span> Facade<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/facade-pattern.png" class="" title="外观模式"><h5 id="java代码-9"><a href="#java代码-9" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// SubsystemA</span><span class="token keyword">class</span> <span class="token class-name">SubsystemA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// SubsystemA operation</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// SubsystemB</span><span class="token keyword">class</span> <span class="token class-name">SubsystemB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// SubsystemB operation</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// SubsystemC</span><span class="token keyword">class</span> <span class="token class-name">SubsystemC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// SubsystemC operation</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Facade</span><span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SubsystemA</span> subsystemA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SubsystemB</span> subsystemB<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SubsystemC</span> subsystemC<span class="token punctuation">;</span>        <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        subsystemA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubsystemA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subsystemB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubsystemB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subsystemC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subsystem</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="责任链模式-Chain-of-Responsibility-Pattern"><a href="#责任链模式-Chain-of-Responsibility-Pattern" class="headerlink" title="责任链模式 (Chain of Responsibility Pattern)"></a>责任链模式 (Chain of Responsibility Pattern)</h4><h5 id="UML-10"><a href="#UML-10" class="headerlink" title="UML:"></a>UML:</h5><pre class="line-numbers language-plant-uml" data-language="plant-uml"><code class="language-plant-uml"><span class="token delimiter punctuation">@startuml</span><span class="token keyword">interface</span> Handler <span class="token punctuation">{</span>    <span class="token punctuation">{</span>abstract<span class="token punctuation">}</span> +handleRequest<span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteHandler1 implements Handler <span class="token punctuation">{</span>    - successor<span class="token punctuation">:</span> Handler    +handleRequest<span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">}</span><span class="token keyword">class</span> ConcreteHandler2 implements Handler <span class="token punctuation">{</span>    - successor<span class="token punctuation">:</span> Handler    +handleRequest<span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">}</span><span class="token keyword">class</span> Request <span class="token punctuation">{</span>    +getRequestType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> String<span class="token punctuation">}</span>Handler <span class="token arrow operator">&lt;|..</span> ConcreteHandler1Handler <span class="token arrow operator">&lt;|..</span> ConcreteHandler2<span class="token delimiter punctuation">@enduml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/23/ruan-jian-she-ji-yu-ti-xi-jie-gou-b-fu-xi/chain-pattern.png" class="" title="责任链模式"><h5 id="java代码-10"><a href="#java代码-10" class="headerlink" title="java代码:"></a>java代码:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Handler interface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// ConcreteHandler1 class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandler1</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Handler</span> successor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Type1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Handle the request</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>successor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// ConcreteHandler2 class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandler2</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Handler</span> successor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Type2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Handle the request</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>successor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Request class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> requestType<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRequestType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> requestType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Other methods...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="凡是课件里有关架构的具体例子（一般都有UML图或有代码）都需要仔细体会，重点搞清楚实验指导书里的各个步骤过程怎么做的。"><a href="#凡是课件里有关架构的具体例子（一般都有UML图或有代码）都需要仔细体会，重点搞清楚实验指导书里的各个步骤过程怎么做的。" class="headerlink" title="凡是课件里有关架构的具体例子（一般都有UML图或有代码）都需要仔细体会，重点搞清楚实验指导书里的各个步骤过程怎么做的。"></a>凡是课件里有关架构的具体例子（一般都有UML图或有代码）都需要仔细体会，重点搞清楚实验指导书里的各个步骤过程怎么做的。</h3>]]></content>
      
      
      <categories>
          
          <category> 武汉理工复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉理工软件设计与体系结构B复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2023/12/15/react/"/>
      <url>/2023/12/15/react/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zh-hans.react.dev/">React官网</a></p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="npm挂代理"><a href="#npm挂代理" class="headerlink" title="npm挂代理"></a>npm挂代理</h3><ul><li>查看npm配置信息 <code>npm config list</code></li></ul><img src="/2023/12/15/react/npm-config-data.png" class="" title="npm配置信息"><ul><li>为npm设置代理</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> proxy http://server:port<span class="token function">npm</span> config <span class="token builtin class-name">set</span> https-proxy http://server:port<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装Git-Bash"><a href="#安装Git-Bash" class="headerlink" title="安装Git Bash"></a>安装Git Bash</h3><p><a href="https://gitforwindows.org/">Git</a></p><h3 id="Git挂代理"><a href="#Git挂代理" class="headerlink" title="Git挂代理"></a>Git挂代理</h3><ul><li><p>Git配置文件位置<code>git config --list --show-origin</code></p></li><li><p>全局配置文件</p></li><li><p>局部配置文件</p></li><li><p>系统配置文件</p></li></ul><h4 id="设置和取消代理"><a href="#设置和取消代理" class="headerlink" title="设置和取消代理"></a>设置和取消代理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy http://127.0.0.1:1080<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy https://127.0.0.1:1080<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><a href="https://nodejs.org/en/">Node.js</a></p><h3 id="安装create-react-app"><a href="#安装create-react-app" class="headerlink" title="安装create-react-app"></a>安装create-react-app</h3><p>在终端执行<code>npm i -g create-react-app</code></p><p>如果你遇到版本过低的警告又不想忽视他</p><p>请使用:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app create-react-app <span class="token builtin class-name">cd</span> create-react-app <span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2023/12/15/react/warning.png" class="" title="warning"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/plugin-proposal-private-property-in-object<span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/plugin-transform-private-property-in-object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装vscode插件"><a href="#安装vscode插件" class="headerlink" title="安装vscode插件"></a>安装vscode插件</h3><ul><li><p><code>Simple React Snippets</code></p></li><li><p><code>Prettier - Code formatter</code></p></li></ul><h3 id="创建React-App"><a href="#创建React-App" class="headerlink" title="创建React App"></a>创建React App</h3><h3 id="在你的项目目录下打开Git-Bash或者你使用的终端"><a href="#在你的项目目录下打开Git-Bash或者你使用的终端" class="headerlink" title="在你的项目目录下打开Git Bash或者你使用的终端"></a>在你的项目目录下打开Git Bash或者你使用的终端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">create-react-app react-app  <span class="token comment"># 可以替换为其他app名称</span><span class="token builtin class-name">cd</span> react-app<span class="token function">npm</span> start  <span class="token comment"># 启动应用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vscode-powershell禁止运行脚本"><a href="#vscode-powershell禁止运行脚本" class="headerlink" title="vscode-powershell禁止运行脚本"></a>vscode-powershell禁止运行脚本</h3><p>如果你遇到如下错误:</p><img src="/2023/12/15/react/vscode-teminal-error.png" class="" title="vscode终端错误"><p>请使用git bash打开执行或者参考如下解决方案。</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>PowerShell执行策略问题</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li><p>以管理员身份运行vscode;</p></li><li><p>执行：get-ExecutionPolicy，显示Restricted，表示状态是禁止的;</p></li></ul><img src="/2023/12/15/react/get-ExecutionPolicy.png" class="" title="get-ExecutionPolicy"><ul><li><p>执行：set-ExecutionPolicy RemoteSigned;</p></li><li><p>这时再执行get-ExecutionPolicy，就显示RemoteSigned;</p></li></ul><img src="/2023/12/15/react/RemoteSigned.png" class="" title="RemoteSigned"><h2 id="JSX-Babel"><a href="#JSX-Babel" class="headerlink" title="JSX &amp;&amp; Babel"></a>JSX &amp;&amp; Babel</h2><p>在JavaScript基础上，让我们能够支持xml。</p><p>Babel将jsx代码编译成js</p><p><a href="https://babeljs.io/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&amp;build=&amp;builtIns=false&amp;corejs=3.21&amp;spec=false&amp;loose=false&amp;code_lz=Q&amp;debug=false&amp;forceAllTransforms=false&amp;modules=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=env%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.23.6&amp;externalPlugins=&amp;assumptions=%7B%7D">Babel</a></p><h2 id="ES6语法糖"><a href="#ES6语法糖" class="headerlink" title="ES6语法糖"></a>ES6语法糖</h2><h3 id="使用bind-函数绑定this的值"><a href="#使用bind-函数绑定this的值" class="headerlink" title="使用bind()函数绑定this的值"></a>使用bind()函数绑定this的值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"yxc"</span><span class="token punctuation">,</span>  <span class="token function-variable function">talk</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> talk <span class="token operator">=</span> person<span class="token punctuation">.</span>talk<span class="token punctuation">;</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果:</p><img src="/2023/12/15/react/this-error.png" class="" title="代码输出结果"><p>说明<strong>this输出的是运行时调用他的对象</strong>。</p><p>所有的全局变量挂在window下，所以第二个talk的this指向window</p><p>可以通过:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> talk <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将person这个变量绑定在talk这个函数上。</p><p>这样的运行结果是:</p><img src="/2023/12/15/react/new-answer.png" class="" title="新的运行结果"><h3 id="箭头函数简写方式"><a href="#箭头函数简写方式" class="headerlink" title="箭头函数简写方式"></a>箭头函数简写方式</h3><p>例如以下箭头函数:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果输入只有一个参数,可以去掉参数括号:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当函数体只有一个return，可以删掉return，同时删掉大括号。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="箭头函数不重新绑定this"><a href="#箭头函数不重新绑定this" class="headerlink" title="箭头函数不重新绑定this"></a>箭头函数不重新绑定this</h3><p>无箭头函数时:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">talk</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/15/react/without.png" class="" title="不使用箭头函数"><p>使用箭头函数时:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">talk</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/15/react/have.png" class="" title="使用箭头函数"><p>因为箭头函数没有this，所以会向上找this。</p><h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><p>传统写法:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"yxc"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> name <span class="token operator">=</span> person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>  age <span class="token operator">=</span> person<span class="token punctuation">.</span>age<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解构写法:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"yxc"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>别名:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"yxc"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> new_name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时: new_name即为 name 的别名。</p><h3 id="数组和对象的展开"><a href="#数组和对象的展开" class="headerlink" title="数组和对象的展开"></a>数组和对象的展开</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">...</span>a<span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//此时a和c不是一个数组。深拷贝</span><span class="token keyword">let</span> d <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//此时a和d是一个数组。浅拷贝</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a===c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a!==c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">===</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d===a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d!==a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/12/15/react/not.png" class="" title="比较结果"><p>字典的展开:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"yxc"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">180</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若声明对象，{“boxes”: “boxes”}，若key和value一样，可以简写为{“boxes”}</p><h3 id="Named与Default-exports"><a href="#Named与Default-exports" class="headerlink" title="Named与Default exports"></a>Named与Default exports</h3><ul><li>Named Export：可以export多个，import的时候需要加大括号，名称需要匹配</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"new Player"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>名字必须相同，但可以使用as定义别名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> MyPlayer<span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token keyword">as</span> id1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./player"</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">MyPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Default Export：最多export一个，import的时候不需要加大括号，可以直接定义别名</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"new Player"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用的时候可以随意改名字,且只能创建一个</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> MyPlayer <span class="token keyword">from</span> <span class="token string">"./player"</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">MyPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">create-react-app box-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装bootstrap"><a href="#安装bootstrap" class="headerlink" title="安装bootstrap"></a>安装bootstrap</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./box-app<span class="token function">npm</span> i bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"bootstrap/dist/css/bootstrap.css"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp-Containers</title>
      <link href="/2023/12/11/cpp-containers/"/>
      <url>/2023/12/11/cpp-containers/</url>
      
        <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://en.cppreference.com/w/">cpp reference</a></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="关于类"><a href="#关于类" class="headerlink" title="关于类"></a>关于类</h3><ul><li><p>空类的字节数是1;</p></li><li><p>一个类中,只有非静态成员变量才属于这个类的对象</p></li><li><p>静态成员函数和非静态成员函数以及静态成员变量均不属于这个对象</p></li><li><p>自定义数据类型存在内存对齐操作</p></li><li><p>在成员函数后面加const,修饰的是this指向,让指针指向的值也不可以修改</p></li><li><p>如果在成员属性前面加上mutable,可以在常函数,常对象下修改</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">mutable</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>常对象只能调用常函数（因为非常函数是可以修改属性的,常对象不允许修改属性）</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//如果利用成员函数重载左移运算符</span><span class="token comment">//明显不能利用成员函数重载,只能用全局函数重载</span><span class="token comment">//void operator&lt;&lt;(cout)//p&lt;&lt;cout</span><span class="token comment">//{</span><span class="token comment">//}</span><span class="token keyword">int</span> m_a<span class="token punctuation">;</span><span class="token keyword">int</span> m_b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m_a= "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_a <span class="token operator">&lt;&lt;</span> <span class="token string">"m_b"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_b<span class="token punctuation">;</span><span class="token keyword">return</span> cout<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//cout&lt;&lt;p1&lt;&lt;endl;</span><span class="token comment">//返回cout是为了cout&lt;&lt;p1后面的&lt;&lt;可以继续使用;</span><span class="token comment">//cout只能有一个</span><span class="token comment">//所以cout在传入和返回的时候只能采用引用的fan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>类私有成员可以被类成员函数访问,不区分成员在哪个实例里</p></li><li><p>类型转换后指针的指向不变(运行时类型不变),但是编译的时候会变成另一个类型(编译时类型)</p></li><li><p>相当于只是用了另一个角度来看待这个指针</p></li></ul><blockquote><p>也就是说</p><p>如果person是父类指针当他指向子类对象还是保存的子类对象的地址</p><p>但是因为指针类型是父类所以只能访问父类成员</p><p>相当于限制访问,只能访问继承的东西,因为有继承关系子类对象一定有父类成员</p><p>所以可以用父类指针指向子类对象但是不能用子类指针指向父类对象</p><p>父类并不包含子类,所以子类指针指向父类对象会引起编译器的错误认识，容易调用子类独有的成员</p><p>当发生强制转换指向子类对象的父类指针强制转换成子类指针就只是改变了看待指针的角度,指针本身没变。</p><p>而此时指针可以访问子类的成员,不管怎么转换,地址的内容不变</p></blockquote><ul><li>成员对象初始化，先客人再自己，析构先自己再客人</li></ul><blockquote><ul><li>常量，引用，对象成员的初始化要在成员初始化表中进行，不可以直接=赋值，与位置无关，都是先客人再自己</li><li>析构都是先自己再客人</li></ul></blockquote><ul><li>初始化列表无顺序</li></ul><blockquote><p>列表中的成员初始化器的顺序是不相关的：初始化的实际顺序如下:</p><ul><li><p>如果构造函数是最终派生类的，那么按基类声明的深度优先、从左到右的遍历中的出现顺序（从左到右指的是基说明符列表中所呈现的），初始化各个虚基类</p></li><li><p>然后，以在此类的基类说明符列表中出现的从左到右顺序，初始化各个直接基类</p></li><li><p>然后，以类定义中的声明顺序，初始化各个非静态成员。</p></li><li><p>最后，执行构造函数体（注意：如果初始化的顺序是由不同构造函数中的成员初始化器列表中的出现所控制，那么析构函数就无法确保销毁顺序是构造顺序的逆序了–&gt;</p></li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Arraytype b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">Arraytype</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Arraytype</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Arraytype</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Arraytype</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>数组元素初始化Arraytype b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//缺省构造函数</span>Arraytype b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//调用一个参数构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li><p>读文件并不会创建文件</p></li><li><p>写文件会创建文件</p><blockquote><p>也就是说 使用ofs.open之后,ofs.is_open就会失效,判断文件是否存在用ifs</p></blockquote></li></ul><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="++运算符重载"></a>++运算符重载</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Myint</span><span class="token punctuation">{</span><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> Myint a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Myint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//前置</span><span class="token comment">//返回引用是为了一直对一个数据进行操作,比如++(++a)</span>Myint<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Myint <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment">//int代表占位参数,可以区分前置和后置</span><span class="token comment">//不能返回引用</span><span class="token punctuation">{</span>Myint temp<span class="token operator">=</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token comment">//先 记录当时结果</span><span class="token comment">//后递增</span><span class="token comment">//最后将记录结果返回</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> Myint a<span class="token punctuation">)</span><span class="token comment">//返回临时变量,不能取引用</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token keyword">return</span> cout<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Myint a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h3><p>若类中有用new申请的堆区内存,采用浅拷贝时只会拷贝地址,不会重新申请内存,导致拷贝出来的内容和原来的内容指向同一个地址</p><p>深拷贝则是手写拷贝构造函数,采用new再次申请内存</p><p>默认给出的拷贝构造函数为浅拷贝</p><p>浅拷贝带来的问题就是堆区的内存重复释放</p><h4 id="易错"><a href="#易错" class="headerlink" title="易错"></a>易错</h4><p>如果使用等号初始化，并不会调用=的重载版本，而是调用拷贝构造函数</p><p>如果存在堆区内存</p><p>没有写拷贝构造函数，只写了=赋值的重载，会产生浅拷贝与深拷贝问题</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*person(const person&amp; p)    {        m_age = new int;        *m_age = *p.m_age;    }*/</span>    person <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_age<span class="token punctuation">;</span>            m_age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> m_age<span class="token punctuation">;</span>            m_age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token operator">*</span>m_age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// person p2 = p1;   此句不会调用重载的等号，而是调用拷贝构造函数，因为对象没有实例化，相当于p2(p1),产生浅拷贝问题</span>    person p2<span class="token punctuation">;</span>    p2<span class="token operator">=</span>p1<span class="token punctuation">;</span><span class="token comment">//或者重写拷贝构造函数</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p2<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该例中只写了等号重载，没有写拷贝构造函数</p><p>如果有</p><p>person p1(10);</p><p>person p2 = p1; </p><p>第二句等价于 person p2(p1);不会调用赋值运算重载，而是调用系统默认的拷贝构造，产生浅拷贝问题</p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念:"></a>基本概念:</h3><h4 id="容器-vector"><a href="#容器-vector" class="headerlink" title="容器:vector;"></a>容器:vector;</h4><p>vector数据结构和数组非常相似,也称为单端数组,可以动态扩展</p><h4 id="算法-for-each"><a href="#算法-for-each" class="headerlink" title="算法:for_each;"></a>算法:for_each;</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_Name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Person s<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只需要函数名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代器-vector-iterator"><a href="#迭代器-vector-iterator" class="headerlink" title="迭代器:vector::iterator;"></a>迭代器:vector<t>::iterator;</t></h4><h4 id="类似动态数组"><a href="#类似动态数组" class="headerlink" title="类似动态数组"></a>类似动态数组</h4><p>动态分配内存，并不是原有空间下分配，而是找一个新空间，将原有数据拷贝到新空间下，然后释放掉原有空间</p><h3 id="容器嵌套容器"><a href="#容器嵌套容器" class="headerlink" title="容器嵌套容器:"></a>容器嵌套容器:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//容器嵌套容器</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>v<span class="token punctuation">;</span><span class="token comment">//创建小容器</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v2<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v3<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v4<span class="token punctuation">;</span><span class="token comment">//向小容器添加数据</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v3<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v4<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//将小容器插入到大容器</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过大容器，把所有数据遍历一遍</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator vit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vit <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vit<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>vit<span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数:"></a>构造函数:</h3><p>vector<t> v;//默认构造函数</t></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v1<span class="token punctuation">;</span><span class="token comment">//默认构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vector<t>(v.begin(),v.end());//将v[begin(),end())区间中的元素拷贝给本身，左闭右开</t></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">v2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左闭右开的区间构造 可以放迭代器也可以放指针 会发生隐式转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>vector<t>(n,elem);//构造函数将n个elem拷贝给本身</t></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//十个一百初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vector<t>(const vector &amp;vec);//拷贝构造函数</t></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">v4</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作:"></a>赋值操作:</h3><p>vector&amp; operator=(const vector &amp;vec);//重载等号运算符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v2<span class="token punctuation">;</span>v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>assign(beg,end);//将[beg,end)区间中的数据拷贝赋值给本身，左闭右开</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v3<span class="token punctuation">;</span>v3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>assign(n,elem);//将n个elem拷贝复制给本身</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v4<span class="token punctuation">;</span>v4<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="容量和大小"><a href="#容量和大小" class="headerlink" title="容量和大小:"></a>容量和大小:</h3><p>empty();//判断容器是否为空</p><p>capacity();//容器的容量</p><p>size();//返回容器中元素的个数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//为真代表容器为空</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1不为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1的容量"</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1的元素个数"</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//容量大于大小</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>resize(int num);//重新指定容器的长度为num,若容器变长,则以默认值填充新位置</p><p>//如果容器变短,则末尾超出容器长度的元素被删除</p><p>resize(int num,elem);//重新指定容器的长度为num,若容器变长,则以elem值填充新位置</p><p>//如果容器变短,则末尾超出容器长度的元素被删除</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//大了添加默认值，小了删除尾部多余的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除:"></a>插入和删除:</h3><p>push_back(ele);//尾部插入元素ele</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pop_back();//删除最后一个元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>v1<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>insert(const_iterator pos,ele);//迭代器指向位置pos插入元素ele</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>insert(const_iterator pos,int count,ele);//迭代器指向位置pos插入count个元素ele</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>erase(const_iterator pos);//删除迭代器指向的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>erase(const_iterator start,const_iterator end);//删除迭代器从start到end之间的元素,左闭右开</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左闭右开</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>clear();//删除容器中所有元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取:"></a>数据存取:</h3><p>at(int idx);//返回索引idx所指的数据</p><p>operator[];//返回索引idx所指的数据</p><p>front();//返回容器中第一个数据元素</p><p>back();//返回容器中最后一个数据元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一个元素为: "</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最后一个元素为: "</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="互换容器"><a href="#互换容器" class="headerlink" title="互换容器:"></a>互换容器:</h3><p>swap(vec);//将vec与本身的元素互换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的容量为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的大小为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的容量为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//容量未变</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的大小为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="巧用swap来收缩"><a href="#巧用swap来收缩" class="headerlink" title="巧用swap来收缩:"></a>巧用swap来收缩:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的容量为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的大小为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的容量为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//容量为变</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的大小为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//巧用swap来收缩</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//!!!!!!</span><span class="token comment">//vector&lt;int&gt;(v)匿名对象</span><span class="token comment">//vector&lt;int&gt;x();调用拷贝构造函数，x不写就是匿名，拷贝一个v</span><span class="token comment">//此时会按照v的大小进行构造</span><span class="token comment">//所以x的大小和容量为3</span><span class="token comment">//x和v进行互换；</span><span class="token comment">//匿名对象结束自动释放,调用析构函数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的容量为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的大小为: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预留空间"><a href="#预留空间" class="headerlink" title="预留空间:"></a>预留空间:</h3><p>减少vector在动态扩展容量时的扩展次数</p><p>只改变容量不申请内存</p><p>reserve()函数预分配出的空间没有被初始化,不可访问</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v1<span class="token punctuation">;</span><span class="token comment">//利用reserve预留空间</span>v1<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计开辟的次数</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1开辟的次数: "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>本质:</p><p>string是C++风格的字符串,而string本质上是一个类</p><h3 id="string和char-的区别"><a href="#string和char-的区别" class="headerlink" title="string和char*的区别:"></a>string和char*的区别:</h3><p>char*是一个指针</p><p>string是一个类,类内部封装了char*,管理这个字符串,是一个char*型的容器</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><p>string内部封装了很多成员方法</p><p>例如:查找find,拷贝copy,删除delete,替换replace,插入insert</p><p>string管理char*所分配的内存,不用担心复制越界和取值越界,由内部进行负责</p><h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数:"></a>构造函数:</h3><p>string();//创建一个空字符串 例如:string str;</p><p>string(const char*s);//使用字符串s初始化;</p><p>string(const string&amp;str);//使用一个string对象初始化另一个string对象;</p><p>string(int n,char c);//使用n个字符c初始化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s1<span class="token punctuation">;</span><span class="token comment">//默认构造</span>string <span class="token function">s2</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用字符串初始化</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"aaa"</span><span class="token punctuation">;</span>string <span class="token function">s3</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>string <span class="token function">s4</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造</span>string <span class="token function">s5</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//十个a</span>cout <span class="token operator">&lt;&lt;</span> s5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值操作-1"><a href="#赋值操作-1" class="headerlink" title="赋值操作:"></a>赋值操作:</h3><p>string&amp; operator=(const char* s);//char*类型字符串 赋值给当前字符串</p><p>string&amp; operator=(const string &amp;s);//把字符串s赋给当前字符串</p><p>string&amp; operator=(char c);//把字符赋值给当前字符串</p><p>string&amp; assign(const char *s);//把字符串s赋给当前的字符串</p><p>string&amp; assign(const char *s, int n);//把字符串s的前n个字符赋给当前的字符串</p><p>string&amp; assign(const string &amp;s);//把字符串s赋给当前字符串</p><p>string&amp; assign(int n, char c);//用n个字符c赋给当前字符串</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str1<span class="token punctuation">;</span>str1 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str2<span class="token punctuation">;</span>str2 <span class="token operator">=</span> str1<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str3<span class="token punctuation">;</span>str3 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str4<span class="token punctuation">;</span>str4<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"hello C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str5<span class="token punctuation">;</span>str5<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"hello C++"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前几个字符去赋值</span>cout <span class="token operator">&lt;&lt;</span> str5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str6<span class="token punctuation">;</span>str6<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str6 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str7<span class="token punctuation">;</span>str7<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str7 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接:"></a>字符串拼接:</h3><p>string&amp; operator+=(const char c);//重载+=操作符</p><p>string&amp; operator+=(const string&amp; str);//重载+=操作符</p><p>string&amp; append(const char *s);//把字符串s连接到当前字符串结尾</p><p>string&amp; append(const char *s, int n);//把字符串s的前n个字符连接到当前字符串结尾</p><p>string&amp; append(const string &amp;s);//同operator+=(const string&amp; str)</p><p>string&amp; append(const string &amp;s, int pos, int n);//字符串s中从pos开始的n个字符连接到字符串结尾</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//字符串拼接</span>string str1<span class="token operator">=</span><span class="token string">"我"</span><span class="token punctuation">;</span>str1 <span class="token operator">+=</span> <span class="token string">"爱玩游戏"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>str1 <span class="token operator">+=</span> <span class="token char">';'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str2<span class="token operator">=</span><span class="token string">"LOL DNF"</span><span class="token punctuation">;</span>str1 <span class="token operator">+=</span> str2<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str3<span class="token operator">=</span><span class="token string">"I"</span><span class="token punctuation">;</span>str3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Love"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>str3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"game abcde"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换:"></a>查找和替换:</h3><p>int find(const string&amp; str, int pos=0)const;//查找str第一次出现位置,从pos开始查找</p><p>未找到返回 string::npos;</p><p>int find(const char* s, int pos=0)const;//查找s第一次出现位置,从pos开始查找</p><p>int find(const char* s, int pos, int n)const;//从pos位置查找s的前n个字符第一次位置</p><p>int find(const char c, int pos=0)const;查找字符c第一次出现的位置</p><p>int rfind(const string&amp; str, int pos=npos)const;//查找s最后一次出现位置,从pos开始查找</p><p>int rfind(const char* s, int pos=npos)const;//查找s最后一次出现的位置,从pos开始查找</p><p>int rfind(const char* s, int pos, int n)const;//从pos查找s的前n个字符最后一次位置</p><p>int rfind(const char c,int pos=0)const;//查找字符c最后一次位置</p><p>string&amp; replace(int pos, int n, const string&amp; str);//替换从pos开始n个字符为字符串str</p><p>string&amp; replace(int pos, int n, const char* s);//替换从pos开始的n个字符为字符串s</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str1<span class="token operator">=</span><span class="token string">"abcdefgde"</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"de"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到字符串"</span> <span class="token operator">&lt;&lt;</span>pos<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到字符串 pos="</span> <span class="token operator">&lt;&lt;</span> pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//rfind和find的区别</span><span class="token comment">//rfind是从右往左查找 find从左往右查找</span><span class="token comment">//find第一次出现的位置</span><span class="token comment">//find最后一次出现的位置</span>pos<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">"de"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pos="</span> <span class="token operator">&lt;&lt;</span> pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str1 <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把bcd换成1111</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较:"></a>字符串比较:</h3><p>=返回 0 &gt;返回1 &lt;返回-1</p><p>int compare(const string &amp;s)const;//与字符串s比较</p><p>int compare(const char *s)const;//与字符串s比较</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str1 <span class="token operator">=</span> <span class="token string">"aello"</span><span class="token punctuation">;</span>string str2 <span class="token operator">=</span> <span class="token string">"zello"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1等于str2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1大于str2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1小于str2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符存取"><a href="#字符存取" class="headerlink" title="字符存取:"></a>字符存取:</h3><p>char&amp; operator[] (int n);//通过[]方式取字符</p><p>char&amp; at(int n);//通过at方式获取字符串,会检查越界</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//1.通过[]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//2.通过at</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">//会检查下标</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入和删除-1"><a href="#插入和删除-1" class="headerlink" title="插入和删除:"></a>插入和删除:</h3><p>string&amp; insert(int pos, const char* s);//插入字符串</p><p>string&amp; insert(int pos, const string&amp; str);//插入字符串</p><p>string&amp; insert(int pos, int n, char c);//在指定位置插入n个字符c</p><p>string&amp; erase(int pos, int n=npos);//删除从pos开始的n个字符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//字符串插入和删除</span>string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//删除</span>str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不填第二个参数就是从pos开始删完,包括pos</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子串获取"><a href="#子串获取" class="headerlink" title="子串获取:"></a>子串获取:</h3><p>string substr(int pos=0, int n=npos)const;//返回由pos开始的n个字符组成的字符串</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>string substr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> substr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string emaill <span class="token operator">=</span> <span class="token string">"zhangshan@sina.com"</span><span class="token punctuation">;</span>string substr <span class="token operator">=</span> emaill<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> emaill<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'@'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//能刚好截到@前面,不包括@</span>cout <span class="token operator">&lt;&lt;</span> substr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="set"><a href="#set" class="headerlink" title="set:"></a>set:</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h3><p>所有元素都会在插入时自动被排序</p><p>自动排序!</p><h3 id="本质"><a href="#本质" class="headerlink" title="本质:"></a>本质:</h3><p>set/multiset属于关联式容器,底层结构是用二叉树实现</p><h3 id="set和multiset区别"><a href="#set和multiset区别" class="headerlink" title="set和multiset区别:"></a>set和multiset区别:</h3><p>set不允许容器中有重复的元素</p><p>multiset允许容器中有重复的元素</p><p>包含set头文件就都可以用了</p><h3 id="构造函数-2"><a href="#构造函数-2" class="headerlink" title="构造函数:"></a>构造函数:</h3><p>set<t> st;//默认构造函数</t></p><p>set(const set &amp;st);//拷贝构造函数</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值:"></a>赋值:</h3><p>set&amp; operator=(const set &amp;st);//重载等号操作符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s1<span class="token punctuation">;</span><span class="token comment">//插入数据只有insert方式</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set容器特点:所有元素在插入时候自动被排序</span><span class="token comment">//set容器不允许插入重复值</span><span class="token comment">//拷贝构造</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值操作</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s3<span class="token punctuation">;</span>s3 <span class="token operator">=</span> s2<span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大小和交换"><a href="#大小和交换" class="headerlink" title="大小和交换:"></a>大小和交换:</h3><p>size();//返回容器中元素的数目</p><p>empty();//判断容器是否为空</p><p>swap(st);//交换两个set容器</p><p>不允许重新指定大小</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s1<span class="token punctuation">;</span><span class="token comment">//插入数据</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1不为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1的大小为:"</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s2<span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1  "</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s2  "</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1  "</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s2  "</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入和删除-2"><a href="#插入和删除-2" class="headerlink" title="插入和删除:"></a>插入和删除:</h3><p>insert(elem);//在容器中插入元素</p><p>clear();//清除所有元素</p><p>erase(pos);//删除pos迭代器所指的元素,返回下一个元素的迭代器</p><p>erase(elem);//删除容器中值为elem的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s<span class="token punctuation">;</span><span class="token comment">//插入</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重载版本</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s.erase(s.begin(), s.end());</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找和统计"><a href="#查找和统计" class="headerlink" title="查找和统计:"></a>查找和统计:</h3><p>find(key);//查找key是否存在,若存在,返回该键的元素的迭代器;若不存在,返回set.end();</p><p>count(key);//统计key的元素个数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s1<span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token comment">//查找,返回值是迭代器</span>it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到元素"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到元素"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//统计三十的个数</span><span class="token keyword">int</span> num <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> num1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set和multiset的区别"><a href="#set和multiset的区别" class="headerlink" title="set和multiset的区别:"></a>set和multiset的区别:</h3><p>set不可以插入重复数据,而multiset可以</p><p>set插入数据的同时会返回插入结果,表示插入是否成功</p><p>multiset不会检测数据,因此可以插入重复数据</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s1<span class="token punctuation">;</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s2<span class="token punctuation">;</span><span class="token comment">//pair 返回值</span><span class="token comment">//s1.insert(20);</span>pair<span class="token operator">&lt;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> ret<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"插入成功!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"插入失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//multiset允许插入重复值</span><span class="token comment">//返回迭代器</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内置类型指定排序规则"><a href="#内置类型指定排序规则" class="headerlink" title="内置类型指定排序规则:"></a>内置类型指定排序规则:</h3><p>set容器默认排序规则为从小到大</p><p>利用仿函数,可以改变排序规则</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">mycmp</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//仿函数</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> v1 <span class="token operator">&gt;</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>mycmp<span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>mycmp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s1<span class="token punctuation">;</span><span class="token comment">//必须要在插之前</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定排序规则为从大到小</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>mycmp<span class="token operator">&gt;</span>s2<span class="token punctuation">;</span><span class="token comment">//必须要在插之前</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义类型指定排序规则"><a href="#自定义类型指定排序规则" class="headerlink" title="自定义类型指定排序规则:"></a>自定义类型指定排序规则:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>string m_name<span class="token punctuation">;</span><span class="token keyword">int</span> m_age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">cmp</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p1<span class="token punctuation">,</span> <span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p2<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_age <span class="token operator">&gt;</span> p2<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//自定义数据类型指定排序规则</span>set<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span>cmp<span class="token operator">&gt;</span>s<span class="token punctuation">;</span><span class="token comment">//创建person对象</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span>cmp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map中所有元素都是pair</p><p>pair中第一个元素为key(键值),起到索引作用,第二个元素为value(实值)</p><p>所有元素都会根据元素的键值自动排序</p><p>map/multimap属于关联式容器,底层结构是用二叉树实现</p><p>可以根据key值快速找到value值</p><p>map和multimap的区别:</p><p>map不允许容器中有重复key值元素</p><p>multimap允许容器中有重复key值元素</p><h3 id="构造与赋值"><a href="#构造与赋值" class="headerlink" title="构造与赋值:"></a>构造与赋值:</h3><p>map&lt;T1,T2&gt;mp;//map默认构造函数</p><p>map(const map &amp;mp);//拷贝构造函数</p><p>map&amp; operator=(const map &amp;mp);//重载等号操作符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>m1<span class="token punctuation">;</span><span class="token comment">//按照key自动排序</span>m1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">m2</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>m3 <span class="token operator">=</span> m2<span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大小和交换-1"><a href="#大小和交换-1" class="headerlink" title="大小和交换:"></a>大小和交换:</h3><p>size();//返回容器中元素的数目</p><p>empty();//判断容器是否为空</p><p>swap(st);//交换两个集合容器</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m不为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m的大小"</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>m2<span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入和删除-3"><a href="#插入和删除-3" class="headerlink" title="插入和删除:"></a>插入和删除:</h3><p>insert(elem);//在容器中插入元素</p><p>[]的重载;</p><p>clear();//清除所有元素</p><p>erase(pos);//删除pos迭代器所指的元素,返回下一个元素的迭代器</p><p>erase(beg,end);//删除区间[beg,end)的所有元素,返回下一个元素的迭代器</p><p>erase(key);//删除容器中值为key的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//第一种</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不用写模板参数</span><span class="token comment">//第三种</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第四种</span>m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token comment">//不建议使用</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; m[7] &lt;&lt; endl;//会自动创建一个,key为7,value为0的数</span><span class="token comment">//主要用于通过key访问value</span>m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间删除</span>m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找和统计-1"><a href="#查找和统计-1" class="headerlink" title="查找和统计:"></a>查找和统计:</h3><p>find(key);//查找key是否存在,若存在,返回该键的元素的迭代器,若不存在,返回map.end();</p><p>count(key);//统计key的元素个数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>m2<span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序:"></a>排序:</h3><p>利用仿函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">cmp</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> v1 <span class="token operator">&gt;</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span>cmp<span class="token operator">&gt;</span><span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span>cmp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//第一种</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span>cmp<span class="token operator">&gt;</span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不用写模板参数</span><span class="token comment">//第三种</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第四种</span><span class="token comment">//m[4] = 40;//不建议使用</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; m[7] &lt;&lt; endl;//会自动创建一个,key为7,value为0的数</span><span class="token comment">//主要用于通过key访问value</span>m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span><span class="token comment">//print(m);</span><span class="token comment">//m.erase(m.begin(), m.end());//区间删除</span><span class="token comment">//m.clear();//清空</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><p>成对出现的数据,利用对组可以返回两个数据</p><p>不用包含头文件</p><p>两种创建方式</p><p>pair&lt;type,type&gt;p(value1,value2);</p><p>pair&lt;type,type&gt;p=make_pair(value1,value2);</p><p>pair&lt;type,type&gt;p=p{value1,value2};//cpp17</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//第一种方式</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名: "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"  年龄: "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//第二种方式</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p1 <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名: "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"  年龄: "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>queue容器是一种先进先出的数据结构,它有两个出口</p><h3 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口:"></a>常用接口:</h3><h4 id="构造函数-3"><a href="#构造函数-3" class="headerlink" title="构造函数:"></a>构造函数:</h4><p>queue<t> que;//queue采用模板类实现,queue对象的默认构造形式</t></p><p>queue(const queue &amp;que);//拷贝构造函数</p><h4 id="赋值操作-2"><a href="#赋值操作-2" class="headerlink" title="赋值操作:"></a>赋值操作:</h4><p>queue&amp; operator=(const queue &amp;que);//重载等号操作符</p><h4 id="数据存取-1"><a href="#数据存取-1" class="headerlink" title="数据存取:"></a>数据存取:</h4><p>push(elem);//往队尾添加元素</p><p>pop();//从队头移除第一个元素</p><p>back();//返回最后一个元素</p><p>front();//返回第一个元素</p><h4 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作:"></a>大小操作:</h4><p>empty();//判断队列是否为空</p><p>size();//返回队列的大小</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>string m_name<span class="token punctuation">;</span><span class="token keyword">int</span> m_age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//queue是一种先进先出的数据结构,有两个出口</span><span class="token comment">//queue不允许有遍历行为</span>queue<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span>q<span class="token punctuation">,</span>q1<span class="token punctuation">;</span><span class="token comment">//入队push 出队pop</span><span class="token comment">//队头front 队尾back</span><span class="token comment">//只能看到队头队尾</span><span class="token comment">//empty size</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"沙僧"</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q1 <span class="token operator">=</span> q<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"q1的大小: "</span> <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"q1的队尾: "</span> <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"q1的队头: "</span> <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//出队</span>q1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"q1的队头: "</span> <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"q1的大小: "</span> <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><ul><li><p>priority_queue：优先队列，数据预设<strong>由大到小</strong>排序，即优先权高的数据会先被取出。</p></li><li><p>定义：</p><ul><li>priority_queue<int>pq;</int></li></ul></li><li><p>把元素x 加进priority_queue：</p><ul><li>pq.push(x)；</li></ul></li><li><p>读取优先权最高的值：</p><ul><li>x = pq.top(）;</li><li>pq.pop(); // 读取后删除</li></ul></li><li><p>判断是否为空的priority_queue：</p><ul><li>pq.empty() 返回true代表为空</li><li>pq.size() 返回元素个数</li></ul></li><li><p>如需改变priority_queue的优先权定义：</p><ul><li>priority_queue<t> pq; 预设由大排到小</t></li><li>priority_queue&lt;T, vector<t>, greater<t> &gt; pq; 改成由小排到大</t></t></li><li>priority_queue&lt;T, vector <t>, cmp &gt; pq; 自行定义cmp 排序</t></li></ul></li><li><p>自行定义cmp，使用struct：</p><ul><li><p>重载运算符() 即仿函数</p></li><li><p>注意：因为优先判定为**!cmp<strong>，所以「由大排到小」需「</strong>反向**」定义实现「最小值优先」。反之亦然。</p></li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Compare</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Type a<span class="token punctuation">,</span><span class="token keyword">const</span> Type b<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token comment">//自定义排序规则</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>stack容器是一种先进后出的数据结构,他只有一个出口</p><p>栈中只有顶端的元素才可以被外界使用,因此栈不允许有遍历行为</p><h3 id="常用接口-1"><a href="#常用接口-1" class="headerlink" title="常用接口:"></a>常用接口:</h3><h4 id="构造函数-4"><a href="#构造函数-4" class="headerlink" title="构造函数:"></a>构造函数:</h4><p>stack<t>stk;//stack采用模板类实现,stack对象的默认构造形式</t></p><p>stack(const stack &amp;stk);//拷贝构造函数</p><h4 id="赋值操作-3"><a href="#赋值操作-3" class="headerlink" title="赋值操作:"></a>赋值操作:</h4><p>stack&amp; operator=(const stack &amp;stk);//重载等号操作符</p><h4 id="数据存取-2"><a href="#数据存取-2" class="headerlink" title="数据存取:"></a>数据存取:</h4><p>push(elem);//向栈顶添加元素</p><p>pop();//从栈顶移除第一个元素</p><p>top();//返回栈顶元素</p><h4 id="大小操作-1"><a href="#大小操作-1" class="headerlink" title="大小操作:"></a>大小操作:</h4><p>empty();//判断堆栈是否为空</p><p>size();//返回栈的大小</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//栈不允许有遍历行为</span><span class="token comment">//栈可以判断是否为空 empty</span><span class="token comment">//栈可以返回元素个数 size 是在入栈的时候统计的</span><span class="token comment">//构造只有默认构造和拷贝构造</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token comment">//特点：先进后出的数据结构</span><span class="token comment">//入栈操作</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s的大小: "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//只要栈不为空就，查看栈顶，并且执行出栈操作</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s的大小: "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念:"></a>基本概念:</h3><p>功能:双端数组,可以对头端进行插入删除操作</p><h3 id="deque和vector的区别"><a href="#deque和vector的区别" class="headerlink" title="deque和vector的区别:"></a>deque和vector的区别:</h3><p>vector对于头部的插入和删除效率低,数据量越大效率越低</p><p>deque相对而言,对头部的插入删除速度会比vector快</p><p>vector访问元素时的速度会比deque快,这和两者内部实现有关</p><h3 id="deque内部工作原理"><a href="#deque内部工作原理" class="headerlink" title="deque内部工作原理:"></a>deque内部工作原理:</h3><p>deque内部有个中控器,维护每段缓冲区中的内容,缓冲区中存放真实数据</p><p>中控器维护的是每个缓冲区的地址,使得使用deque时像一片连续的内存空间</p><h3 id="赋值操作-4"><a href="#赋值操作-4" class="headerlink" title="赋值操作:"></a>赋值操作:</h3><p>deque&amp; operator=(const deque &amp;deq);//重载等号操作符</p><p>assign(beg,end);//将[beg，end)区间中的数据拷贝赋值给本身,左闭右开</p><p>assign(n,elem);//将n个elem拷贝赋值给本身</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">   <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等号赋值</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d2<span class="token punctuation">;</span>d2 <span class="token operator">=</span> d1<span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//assign赋值</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d3<span class="token punctuation">;</span>d3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d4<span class="token punctuation">;</span>d4<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大小操作-2"><a href="#大小操作-2" class="headerlink" title="大小操作:"></a>大小操作:</h3><p>deque.empty();//判断容器是否为空</p><p>deque.size();//返回容器中元素的个数</p><p>deque.resize(num);//重新指定容器的长度为num,若容器变长,则以默认值填充新位置</p><p>//如果容器变短,则末尾超出容器长度部分的元素被删除</p><p>deque.resize(num,elem);//重新指定容器的长度为num,若容器变长,则以elem值填充新位置</p><p>//如果容器变短,则末尾超出容器长度部分的元素被删除</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">   <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//deque没有容量,只有元素个数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"deque的大小"</span> <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"deque是否为空"</span> <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//deque重新指定大小</span>d1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二个参数为如果空间变大填入的数</span>d1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入和删除-4"><a href="#插入和删除-4" class="headerlink" title="插入和删除:"></a>插入和删除:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>push_back(elem);//在容器尾部添加一个数据</p><p>push_front(elem);//在容器头部插入一个数据</p><p>pop_back();//删除容器最后一个数据</p><p>pop_front();//删除容器第一个数据</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d1<span class="token punctuation">;</span><span class="token comment">//尾插</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//头插</span>d1<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尾删</span>d1<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//头删</span>d1<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>insert(pos,elem);//在pos位置插入一个elem元素的拷贝,返回新数据的位置</p><p>insert(pos,n,elem);//在pos位置插入n个elem数据,无返回值</p><p>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据,无返回值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">;</span>d2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//insert插入</span>d1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两个一万</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在头部插一个区间</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>clear();//清空容器的所有数据</p><p>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置</p><p>erase(pos);//删除pos位置的数据,返回下一个数据的位置</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//deque删除</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d1<span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左闭右开区间删除</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d1为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据存取-3"><a href="#数据存取-3" class="headerlink" title="数据存取:"></a>数据存取:</h3><p>at(int idx);//返回索引idx所指的数据</p><p>operator[];//返回索引idx所指的数据</p><p>front();//返回容器中第一个数据元素</p><p>back();//返回容器中最后一个元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d1<span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通过中括号方式</span>cout <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//通过at的方式</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一个元素为: "</span> <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最后一个元素为: "</span> <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作:"></a>排序操作:</h3><p>sort(iterator beg,iterator end);//对beg和end区间内元素进行排序</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d1<span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机访问迭代器均支持sort排序</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念:"></a>基本概念:</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h4><p>将数组进行链式存储</p><h4 id="链表-list"><a href="#链表-list" class="headerlink" title="链表:(list)"></a>链表:(list)</h4><p>是一种物理存储单元上非连续的存储结构,数据元素的逻辑顺序是通过链表中的指针链接实现的</p><h4 id="链表的组成"><a href="#链表的组成" class="headerlink" title="链表的组成:"></a>链表的组成:</h4><p>链表由一系列结点组成</p><h4 id="结点的组成"><a href="#结点的组成" class="headerlink" title="结点的组成:"></a>结点的组成:</h4><p>一个是存储数据元素的数据域,另一个是存储下一个结点地址的指针域</p><p>STL中的链表是一个双向循环链表</p><h3 id="构造函数-5"><a href="#构造函数-5" class="headerlink" title="构造函数:"></a>构造函数:</h3><p>list<t>list;//list采用模板类实现,对象的默认构造形式</t></p><p>list(beg,end);//构造函数将区间[beg,end)区间中的元素拷贝给本身,左闭右开</p><p>list(n,elem);//构造函数将n个elem拷贝给本身</p><p>list(const list &amp;lst);//拷贝构造函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L1<span class="token punctuation">;</span><span class="token comment">//默认构造</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">L2</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造</span><span class="token function">print</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">L3</span><span class="token punctuation">(</span>L1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> L1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间构造</span><span class="token function">print</span><span class="token punctuation">(</span>L3<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">L4</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//n个elem</span><span class="token function">print</span><span class="token punctuation">(</span>L4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值和交换"><a href="#赋值和交换" class="headerlink" title="赋值和交换:"></a>赋值和交换:</h3><p>assign(beg,end);//将[beg,end)区间中的数据拷贝赋值给本身</p><p>assign(n,elem);//将n个elem拷贝赋值给本身</p><p>list&amp; operator=(const list &amp;list);//重载等号操作符</p><p>swap(lst);//将lst与本身的元素互换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L2 <span class="token operator">=</span> L1<span class="token punctuation">;</span><span class="token comment">//=赋值</span><span class="token function">print</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L3<span class="token punctuation">;</span>L3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>L2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> L2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间赋值</span><span class="token function">print</span><span class="token punctuation">(</span>L3<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L4<span class="token punctuation">;</span>L4<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//n个elem</span><span class="token function">print</span><span class="token punctuation">(</span>L4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L2<span class="token punctuation">;</span>L2<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容量和大小-1"><a href="#容量和大小-1" class="headerlink" title="容量和大小:"></a>容量和大小:</h3><p>empty();//判断容器是否为空</p><p>size();//返回容器中元素的个数</p><p>resize(int num);//重新指定容器的长度为num,若容器变长,则以默认值填充新位置</p><p>//如果容器变短,则末尾超出容器长度的元素被删除</p><p>resize(int num,elem);//重新指定容器的长度为num,若容器变长,则以elem值填充新位置</p><p>//如果容器变短,则末尾超出容器长度的元素被删除</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//大小操作</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"L1为空!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"L1不为空!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"L1的元素个数为: "</span> <span class="token operator">&lt;&lt;</span> L1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>L1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入和删除-5"><a href="#插入和删除-5" class="headerlink" title="插入和删除:"></a>插入和删除:</h3><p>push_back(elem);//在容器尾部加入一个元素</p><p>pop_back();//删除容器中最后一个元素</p><p>push_from(elem);//在容器开头插入一个元素</p><p>insert(pos,elem);//在pos位置插elem元素的拷贝,返回新数据的位置</p><p>insert(pos,n,elem);//在pos位置插入n个elem数据,无返回值</p><p>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据,返回下一个数据的位置,左闭右开</p><p>clear();//移除容器的所有数据</p><p>erase(beg,end);//删除[beg,end)区间的数据,返回下一个数据的位置</p><p>erase(pos);//删除pos位置的数据,返回下一个数据的位置</p><p>remove(elem);//删除容器中所有与elem值匹配的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L<span class="token punctuation">;</span><span class="token comment">//尾插</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//头插</span>L<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尾删</span>L<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//头删</span>L<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//insert插入</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//erase删除</span>L<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移除</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空</span>L<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据存取-4"><a href="#数据存取-4" class="headerlink" title="数据存取:"></a>数据存取:</h3><p>front();//返回第一个元素</p><p>back();//返回最后一个元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L<span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"L第一个元素: "</span> <span class="token operator">&lt;&lt;</span> L<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"L最后一个元素: "</span> <span class="token operator">&lt;&lt;</span> L<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//list&lt;int&gt;::iterator it=L.begin();</span><span class="token comment">//it++;it--;支持双向</span><span class="token comment">//it=it+1;//不报错就支持随机访问，在list里面这种写法报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反转和排序"><a href="#反转和排序" class="headerlink" title="反转和排序:"></a>反转和排序:</h3><p>reverse();//反转链表</p><p>sort();//链表排序</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span><span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//降序,第一个数 &gt; 第二个数</span><span class="token keyword">return</span> a1 <span class="token operator">&gt;</span> a2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反转后</span>L1<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span><span class="token comment">//所有不支持随机访问迭代器的容器,不可以用标准算法</span><span class="token comment">//不支持随机访问迭代器的容器,内部会提供对应的一些算法</span>L1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从小到大</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从大到小 , 用reverse会浪费效率</span><span class="token function">print</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序案例"><a href="#排序案例" class="headerlink" title="排序案例:"></a>排序案例:</h3><p>案例描述:将Person自定义数据类型进行排序,Person中属性有姓名,年龄,身高</p><p>排序规则:按照年龄进行升序,如果年龄相同按照身高进行降序</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_height</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>string m_name<span class="token punctuation">;</span><span class="token keyword">int</span> m_age<span class="token punctuation">;</span><span class="token keyword">int</span> m_height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>m_height <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_age <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_height <span class="token operator">&gt;</span> p2<span class="token punctuation">.</span>m_height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_age <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span>L<span class="token punctuation">;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"孙权"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="评委打分"><a href="#评委打分" class="headerlink" title="评委打分"></a>评委打分</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*create by zhangtao date : 2018 3 16createPerson( vector&lt;Person&gt;&amp;v )  创建5名选手，参数1：...*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span></span><span class="token comment">/*有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。//1. 创建五名选手，放到vector中//2. 遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中//3. sort算法对deque容器中分数排序，pop_back pop_front去除最高和最低分//4. deque容器遍历一遍，累加分数，累加分数/d.size()//5. person.score = 平均分*/</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>m_Score <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span>string m_Name<span class="token punctuation">;</span> <span class="token comment">//姓名</span><span class="token keyword">int</span> m_Score<span class="token punctuation">;</span>   <span class="token comment">//平均分</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>string nameSeed <span class="token operator">=</span> <span class="token string">"ABCDE"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string name <span class="token operator">=</span> <span class="token string">"选手"</span><span class="token punctuation">;</span>name <span class="token operator">+=</span> nameSeed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Person <span class="token function">p</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有10个评委给每个人打分</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>d<span class="token punctuation">;</span> <span class="token comment">//存放评委打分容器</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">41</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">;</span>  <span class="token comment">// 60 ~ 100</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//cout &lt;&lt; "选手： " &lt;&lt; it-&gt;m_Name &lt;&lt; "的打分情况： " &lt;&lt; endl;</span><span class="token comment">//for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span><span class="token comment">//{</span><span class="token comment">//cout &lt;&lt; *dit &lt;&lt; " ";</span><span class="token comment">//}</span><span class="token comment">//cout &lt;&lt; endl;</span><span class="token comment">//排序  从小到大排序</span><span class="token function">sort</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除 最高分 和 最低分</span>d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最高</span>d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最低</span><span class="token comment">//获取总分</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator dit <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dit <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dit<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>sum <span class="token operator">+=</span> <span class="token operator">*</span>dit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获取平均分</span><span class="token keyword">int</span> avg <span class="token operator">=</span> sum <span class="token operator">/</span> d<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">-&gt;</span>m_Score <span class="token operator">=</span> avg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">showScore</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 平均分数： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>m_Score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//设置随机数种子</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1、存放选手容器</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> v<span class="token punctuation">;</span> <span class="token comment">//2、创建五名选手</span><span class="token function">createPerson</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3、打分</span><span class="token function">setScore</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4、显示得分</span><span class="token function">showScore</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">////测试</span><span class="token comment">//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span><span class="token comment">//{</span><span class="token comment">//cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 分数： " &lt;&lt; it-&gt;m_Score &lt;&lt; endl;</span><span class="token comment">//}</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="STL常用算法"><a href="#STL常用算法" class="headerlink" title="STL常用算法"></a>STL常用算法</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>!!!!    类名()  代表匿名对象</p><p>算法主要是由头文件 <code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成</p><p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个,范围涉及到比较,交换,查找,遍历操作,复制,修改等等</p><p><code>&lt;numeric&gt;</code>体积很小,只包括几个在序列上面进行简单数学运算的模板函数</p><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象</p><h3 id="1-常用遍历算法"><a href="#1-常用遍历算法" class="headerlink" title="1.常用遍历算法"></a>1.常用遍历算法</h3><p>for_each //遍历容器</p><p>transform //搬运容器到另一个容器中</p><h4 id="for-each"><a href="#for-each" class="headerlink" title="for_each:"></a>for_each:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//普通函数</span><span class="token keyword">void</span> <span class="token function">print01</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//仿函数</span><span class="token keyword">class</span> <span class="token class-name">print02</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print01<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">print02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="transform"><a href="#transform" class="headerlink" title="transform:"></a>transform:</h4><p>transform(iterator beg1,iterator end1,iterator beg2, <em>func</em>);</p><p>//beg1 源容器开始迭代器</p><p>//end1 源容器结束迭代器</p><p>//beg2 目标容器开始迭代器</p><p>//_func 函数或者函数对象</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">myprint</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Transform</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> v<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>vTarget<span class="token punctuation">;</span><span class="token comment">//目标容器</span>vTarget<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不能用reserve，reserve只改变容量不申请内存</span><span class="token function">transform</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vTarget<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-常用查找算法"><a href="#2-常用查找算法" class="headerlink" title="2.常用查找算法"></a>2.常用查找算法</h3><p> find //查找元素</p><p>find_if //按条件查找元素</p><p>adjacent_find //查找相邻重复元素</p><p>binary_search //二分查找法</p><p>count //统计元素个数</p><p>count_if //按条件统计元素个数</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//常用查找算法</span><span class="token comment">//find</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Person a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token operator">==</span>age<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token operator">==</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string namea<span class="token punctuation">,</span><span class="token keyword">int</span> agea<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>namea<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">age</span><span class="token punctuation">(</span>agea<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//查找 内置数据类型</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector`<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>`v<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//查找容器中是否有5这个元素</span>    vector`<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>`<span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//查找 自定义数据类型</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector`<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span>`v<span class="token punctuation">;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector`<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span>`<span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu</title>
      <link href="/2023/12/10/ubuntu/"/>
      <url>/2023/12/10/ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="开机遇到grub"><a href="#开机遇到grub" class="headerlink" title="开机遇到grub>"></a>开机遇到grub&gt;</h2><h3 id="双系统开机到grub的解决"><a href="#双系统开机到grub的解决" class="headerlink" title="双系统开机到grub的解决"></a>双系统开机到grub的解决</h3><ol><li><p>先在grub&gt;输入ls，展示的是所有分区</p></li><li><p>然后再ls (xxx,xxx)/boot/grub注意括号里面的应该填上自己分区名字，这一步是为了检查grub所在的具体分区，如果没有出现没有找到文件位置的提示，就说明找对了</p></li><li><p>假如找到的分区为(hd1,gpt3)那么就运行set root=(hd1,gpt3)</p></li><li><p>再输入set prefix=(hd1,gpt3)/boot/grub</p></li><li><p>输入insmod normal，再输入normal</p></li><li><p>就会到正常引导了</p></li><li><p>进入linux系统后sudo update-grub再输入sudo grub-install /dev/sda</p></li></ol><p>PS:出现这种情况的可能原因：win系统更新覆盖了，强制关闭linux，等等</p><h2 id="Linux安装MySQL"><a href="#Linux安装MySQL" class="headerlink" title="Linux安装MySQL"></a>Linux安装MySQL</h2><h3 id="Linux-UNIX-上安装-MySQL"><a href="#Linux-UNIX-上安装-MySQL" class="headerlink" title="Linux/UNIX 上安装 MySQL"></a>Linux/UNIX 上安装 MySQL</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server <span class="token comment">#默认最新版</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libmysqlclient-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">netstat</span> <span class="token parameter variable">-tap</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你在Ubuntu上使用sudo apt-get install mysql-server指令安装mysql后，你会发现你登录不上，会出现这样的情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop@yjp:~$ mysqlERROR <span class="token number">1045</span> <span class="token punctuation">(</span><span class="token number">28000</span><span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'yjp'</span>@<span class="token string">'localhost'</span> <span class="token punctuation">(</span>using password: NO<span class="token punctuation">)</span>hadoop@yjp:~$ mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>Enter password: ERROR <span class="token number">1698</span> <span class="token punctuation">(</span><span class="token number">28000</span><span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'localhost'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上述指令安装mysql后，在安装过程中mysql数据库自动为你设置了账号密码，并放在了/etc/mysql/debian.cnf文件中</p><h3 id="修改MYSQL-用户密码"><a href="#修改MYSQL-用户密码" class="headerlink" title="修改MYSQL 用户密码"></a>修改MYSQL 用户密码</h3><p>一、切换数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二、修改root用户密码</p><p>注意下面两条修改mysql root用户密码的命令只适用于mysql5.7版本及以下</p><p>这里你会发现你在网上搜出来的大部分修改面的命令都是</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update user set password=PASSWORD("123456") where user=root;                              --设置密码为123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者是</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update user set authentication_string=PASSWORD(“123456”) where user=‘root’;              --设置密码为123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你是mysql5.7用户及以下，上面两条指令适用于你！</p><p>执行完命令之后 flush privileges;  更新所有操作权限，重启数据库 service mysql restart 即可</p><p>mysql 5.7.9以后废弃了password字段和password()函数；authentication_string:字段表示用户密码，而authentication_string字段下只能是mysql加密后的41位字符串密码。</p><p>而我们一般现在使用指令安装mysql会默认安装最新版mysql8.0</p><p>修改mysql8.0 root用户密码正确打开方式</p><p>MySql 从8.0开始修改密码有了变化，在user表加了字段authentication_string，修改密码前先检查authentication_string是否为空</p><p>如果不为空，先置空字段在修改密码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use mysql; update user set authentication_string='' where user='root';      --将字段置为空alter user 'root'@'localhost' identified with mysql_native_password by '123456';   --修改密码为123456如果为空，则直接修改密码alter user 'root'@'localhost' identified with mysql_native_password by '123456';   --修改密码为123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改成功！</p><img src="/2023/12/10/ubuntu/mysql-changepasswd.png" class="" title="MySQL修改根用户密码"><p><strong>如果出现下列错误：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是由于你上面如果用的第二种方法设置绕过密码登录，这时root用户是无密码状态，会报这个错误！</p><p>这时，先执行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再执行修改密码命令就行了</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter user 'root'@'localhost' identified with mysql_native_password by '123456';      --修改密码为123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大功告成！</p><p>重启mysql</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用第一种方法直接查看mysql默认账户密码登录的则自动忽略下述内容！</p><p>如果你是修改的 /etc/mysql/mysql.conf.d/mysqld.cnf  文件设置绕过密码登录（即上述第二种方法进入数据库）</p><p>设置密码完毕后一定要将 skip-grant-tables 这句代码在文件中注释掉。</p><p>然后重启mysql</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>当然你也可以先登录电脑root用户，初始mysql的root用户没有密码，只有通过root用户登录mysql时直接回车可以跳过输入密码阶段。</li></ul><h3 id="MYSQL无法读取本地文件文件"><a href="#MYSQL无法读取本地文件文件" class="headerlink" title="MYSQL无法读取本地文件文件"></a>MYSQL无法读取本地文件文件</h3><h4 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h4><p>如果你的系统启用了 SELinux 或 AppArmor，这些安全模块可能会影响文件访问权限。你可以通过禁用它们或者配置相应的规则来解决问题。</p><p>在使用 Ubuntu 或类似基于 Debian 的 Linux 发行版时，AppArmor 是一种应用程序安全框架，用于限制特定程序的活动。如果你需要禁用 AppArmor，可以按照以下步骤进行操作：</p><h4 id="修改AppArmor配置文件"><a href="#修改AppArmor配置文件" class="headerlink" title="修改AppArmor配置文件"></a>修改AppArmor配置文件</h4><p>MySQL的AppArmor的配置文件是/etc/apparmor.d/usr.sbin.mysqld，其中usr.sbin.mysqld代表执行程序/usr/sbin/mysqld，也就是MySQL服务的主程序</p><img src="/2023/12/10/ubuntu/AppArmor-config.png" class="" title="AppArmor关于mysql的安全配置信息"><p>第一行加入允许读取的数据文件夹</p><p>rwk表示</p><ul><li><p>r - 读取 - 读取数据的权限</p></li><li><p>w - 写入 - 创建、删除、写入文件和扩展文件的权限</p></li><li><p>k - lock - 锁定文件的权限，与 write perm 结合以确定它是否有权获取独占锁定</p></li></ul><p>重启AppArmor</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> apparmor reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="取消禁用AppArmor服务-不推荐"><a href="#取消禁用AppArmor服务-不推荐" class="headerlink" title="取消禁用AppArmor服务(不推荐)"></a>取消禁用AppArmor服务(不推荐)</h4><h5 id="1-启用-AppArmor-服务："><a href="#1-启用-AppArmor-服务：" class="headerlink" title="1. 启用 AppArmor 服务："></a>1. 启用 AppArmor 服务：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将使 AppArmor 在系统启动时自动启动。</p><h5 id="2-启动-AppArmor-服务："><a href="#2-启动-AppArmor-服务：" class="headerlink" title="2. 启动 AppArmor 服务："></a>2. 启动 AppArmor 服务：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-检查-AppArmor-状态："><a href="#3-检查-AppArmor-状态：" class="headerlink" title="3. 检查 AppArmor 状态："></a>3. 检查 AppArmor 状态：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令将显示 AppArmor 服务的当前状态。如果状态显示为 “active”，则表示 AppArmor 服务已成功启动。</p><h5 id="4-重新加载-AppArmor-配置（可选）："><a href="#4-重新加载-AppArmor-配置（可选）：" class="headerlink" title="4. 重新加载 AppArmor 配置（可选）："></a>4. 重新加载 AppArmor 配置（可选）：</h5><p>在重新启用 AppArmor 后，你可以选择重新加载配置以使更改生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> apparmor reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，如果你使用的是 systemd：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl reload apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这些步骤应该使 AppArmor 服务重新启用并运行。请注意，重新启用 AppArmor 服务可能会导致之前由 AppArmor 禁用的应用程序再次受到 AppArmor 的限制。确保你的应用程序配置适当，以适应 AppArmor 的规则。</p><h4 id="禁用-AppArmor-服务-不推荐-："><a href="#禁用-AppArmor-服务-不推荐-：" class="headerlink" title="禁用 AppArmor 服务(不推荐)："></a>禁用 AppArmor 服务(不推荐)：</h4><h5 id="1-停止-AppArmor-服务："><a href="#1-停止-AppArmor-服务：" class="headerlink" title="1. 停止 AppArmor 服务："></a>1. 停止 AppArmor 服务：</h5>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-禁用-AppArmor-服务（可选）"><a href="#2-禁用-AppArmor-服务（可选）" class="headerlink" title="2. 禁用 AppArmor 服务（可选）:"></a>2. 禁用 AppArmor 服务（可选）:</h5>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl disable apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   这样系统启动时就不会加载 AppArmor 服务。</p><h5 id="3-重启计算机："><a href="#3-重启计算机：" class="headerlink" title="3. 重启计算机："></a>3. 重启计算机：</h5>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="卸载-AppArmor-软件包-不推荐-："><a href="#卸载-AppArmor-软件包-不推荐-：" class="headerlink" title="卸载 AppArmor 软件包(不推荐)："></a>卸载 AppArmor 软件包(不推荐)：</h4><p>如果你希望彻底删除 AppArmor，而不仅仅是停止服务，可以执行以下步骤：</p><h5 id="1-卸载-AppArmor-软件包："><a href="#1-卸载-AppArmor-软件包：" class="headerlink" title="1. 卸载 AppArmor 软件包："></a>1. 卸载 AppArmor 软件包：</h5>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> purge apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   这将删除 AppArmor 软件包及其配置文件。</p><h5 id="2-重启计算机："><a href="#2-重启计算机：" class="headerlink" title="2. 重启计算机："></a>2. 重启计算机：</h5>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，禁用或删除 AppArmor 可能会导致系统安全性降低，因为 AppArmor 的目的是提供一层额外的安全保护。在禁用或删除之前，请确保你理解了相关的风险，并确保你有其他安全机制来保护系统。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>[1] <a href="https://zhuanlan.zhihu.com/p/407785086">AppArmor与MySQL</a></li></ul><h3 id="MySQL的读取"><a href="#MySQL的读取" class="headerlink" title="MySQL的读取"></a>MySQL的读取</h3><p>mysql的位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 mysql 配置文件加载顺序</span>/usr/bin/mysql <span class="token parameter variable">--verbose</span> <span class="token parameter variable">--help</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-A</span> <span class="token number">1</span> <span class="token string">'Default options'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后会出现一些信息</p><img src="/2023/12/10/ubuntu/MySQL-config.png" class="" title="MySQL配置加载顺序"><p>这个信息的意思是：</p><p>服务器首先读取的是 /etc/my.cnf 文件，如果前一个文件不存在则继续读 /etc/mysql/my.cnf 文件，依此类推，如若还不存在便会去读~/.my.cnf文件。</p><p>如果以上文件都不存在，则说明在对mysql编译完成之后你没有对mysql进行配置，需要你自己复制一份mysql提供的默认配置文件到上面提到的目录中，然后改名为my.cnf，修改文件的所有者和所属组并赋予执行权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/etc<span class="token function">cp</span> /usr/support-files/my-default.cnf /usr/local/mysql/etc/my.cnf<span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql:mysql /usr/etc/<span class="token function">chmod</span> <span class="token number">755</span> /usr/etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上操作之后，需要对my.cnf进行基本配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">basedir <span class="token operator">=</span> /usr/local/mysql              <span class="token comment"># 指mysql的安装目录</span>datadir <span class="token operator">=</span> /usr/local/mysql/data         <span class="token comment"># 指mysql的数据存放目录</span>port <span class="token operator">=</span> <span class="token number">3306</span>                             <span class="token comment"># 指mysql的监听端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后重启mysql使配置生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/support-files/mysql.server restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果修改my.cnf后mysql启动不了,可以通过如下方式查看错误信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/mysqld <span class="token parameter variable">--verbose</span> <span class="token parameter variable">--help</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-A</span> <span class="token number">1</span> <span class="token string">'Default options'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h4><img src="/2023/12/10/ubuntu/MySQL-secure_file_priv.png" class="" title="MySQL安全文件夹配置"><p>将mysql的安全文件夹设置为mysql用户的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql:mysql /mysql_data/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加读写权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /mysql_data/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/12/10/ubuntu/MySQL-Config-dir.png" class="" title="MySQL配置数据文件夹"><h2 id="QT6-61"><a href="#QT6-61" class="headerlink" title="QT6.61"></a>QT6.61</h2><h3 id="安装完打不开的问题"><a href="#安装完打不开的问题" class="headerlink" title="安装完打不开的问题"></a>安装完打不开的问题</h3><h4 id="解决Qt出现qt-qpa-plugin-Could-not-load-the-Qt-platform-plugin-“xcb”"><a href="#解决Qt出现qt-qpa-plugin-Could-not-load-the-Qt-platform-plugin-“xcb”" class="headerlink" title="解决Qt出现qt.qpa.plugin:Could not load the Qt platform plugin “xcb”"></a>解决Qt出现qt.qpa.plugin:Could not load the Qt platform plugin “xcb”</h4><p>qt.qpa.plugin: Could not load the Qt platform plugin “xcb” in “” even though it was found.<br>This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</p><p>Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, xcb.</p><p>Aborted (core dumped)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@node01:/home/Junjie/ovito-basic-3.9.4-x86_64/bin<span class="token comment"># ./ovito</span>qt.qpa.plugin: From <span class="token number">6.5</span>.0, xcb-cursor0 or libxcb-cursor0 is needed to load the Qt xcb platform plugin.qt.qpa.plugin: Could not load the Qt platform plugin <span class="token string">"xcb"</span> <span class="token keyword">in</span> <span class="token string">""</span> even though it was found.This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem. Available platform plugins are: minimal, wayland, xcb. 已放弃 <span class="token punctuation">(</span>核心已转储<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h5><p>修改配置文件~/.bashrc：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在最末尾添加如下语句，会在qtcreator启动时，列出详细的错误提示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_DEBUG_PLUGINS</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存退出编辑，使配置文件生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动qtcreator会弹出如下详细错误信息：</p><img src="/2023/12/10/ubuntu/Qt-error.png" class="" title="Qt启动错误"><p>在打印的错误信息的最下面，找到了引发错误的真正原因：</p><img src="/2023/12/10/ubuntu/QT-detail.jpg" class="" title="QT详细错误"><img src="/2023/12/10/ubuntu/QT-detail-error.png" class="" title="引发错误的真正原因"><p>也就是Qt动态链接库的问题，当加载libqxcb.so库的时候，还需要加载libxcb-xinerama库。<br>切换到报错libxcb.so所在目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#替换为自己的报错目录</span><span class="token builtin class-name">cd</span> /home/tangdou/Qt/Tools/QtCreator/lib/Qt/plugins/platforms/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行ldd libqxcb.so，查看关联内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldd libqxcb.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/12/10/ubuntu/My-QT-Error.jpg" class="" title="关联内容"><p>libxcb.cursor.so.0没有</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>安装libxcb-cursor0库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如果还存在其他依赖库没有安装，也一并安装。</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libxcb-cursor0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="PDF转图片"><a href="#PDF转图片" class="headerlink" title="PDF转图片"></a>PDF转图片</h2><p>Pdftoppm是一个命令行工具，它可以将PDF文档页面转换为PNG等格式的图片。还可以指定图片的分辨率、比例和裁剪图片。</p><p>根据你的Linux发行版按照如下方式安装pdftoppm。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> poppler-utils     <span class="token punctuation">[</span>On Debian/Ubuntu <span class="token operator">&amp;</span> Mint<span class="token punctuation">]</span><span class="token function">sudo</span> dnf <span class="token function">install</span> poppler-utils     <span class="token punctuation">[</span>On RHEL/CentOS <span class="token operator">&amp;</span> Fedora<span class="token punctuation">]</span><span class="token function">sudo</span> <span class="token function">zypper</span> <span class="token function">install</span> poppler-tools  <span class="token punctuation">[</span>On OpenSUSE<span class="token punctuation">]</span>  <span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> poppler             <span class="token punctuation">[</span>On Arch Linux<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将PDF文档转成图片"><a href="#将PDF文档转成图片" class="headerlink" title="将PDF文档转成图片"></a>将PDF文档转成图片</h3><p>将pdf转换为图片的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pdftoppm -<span class="token operator">&lt;</span>image_format<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>pdf_filename<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>image_name<span class="token operator">&gt;</span>pdftoppm -<span class="token operator">&lt;</span>image_format<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>pdf_filename<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>image_name<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在下列示例中，我的pdf文件名称是Linux_For_Beginners.pdf，我会将其转换为PNG格式并将图片命为Linux_For_Beginners。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pdftoppm <span class="token parameter variable">-png</span> Linux_For_Beginners.pdf Linux_For_Beginners<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将pdf文件每一页都转换为png格式的图片，如Linux_For_Beginners-1.png、Linux_For_Beginners-2.png等。</p><img src="/2023/12/10/ubuntu/pdftoppm-all.png" class="" title="每一页都转换"><h3 id="将指定范围内的页面转成图片"><a href="#将指定范围内的页面转成图片" class="headerlink" title="将指定范围内的页面转成图片"></a>将指定范围内的页面转成图片</h3><p>命令如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">pdftoppm -&lt;image_format&gt; -f N -l N &lt;pdf_filename&gt; &lt;image_name&gt;pdftoppm -&lt;image_format&gt; -f N -l N &lt;pdf_filename&gt; &lt;image_name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>N为起始页编号， -l N 指定结束页编号。</p><p>在下面的例子中，我们将文件Linux_For_Beginners.pdf的第10页到第15页转换为PNG。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">pdftoppm -png -f 10 -l 15 Linux_For_Beginners.pdf Linux_For_Beginners<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的图片名为Linux_For_Beginners-10.png，Linux_For_Beginners-11.png，等。</p><img src="/2023/12/10/ubuntu/change-some.png" class="" title="转换部分页"><h3 id="将pdf文件的第一页转成图片"><a href="#将pdf文件的第一页转成图片" class="headerlink" title="将pdf文件的第一页转成图片"></a>将pdf文件的第一页转成图片</h3><p>命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pdftoppm <span class="token parameter variable">-png</span> <span class="token parameter variable">-f</span> <span class="token number">1</span> <span class="token parameter variable">-l</span> <span class="token number">1</span> Linux_For_Beginners.pdf Linux_For_Beginners<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="调整转换图片的DPI质量"><a href="#调整转换图片的DPI质量" class="headerlink" title="调整转换图片的DPI质量"></a>调整转换图片的DPI质量</h3><p>Pdftoppm默认将PDF页面转换为DPI为150的图片。</p><p>如需要调整，使用参数选项”-rx”和”-ry”。</p><p>在这个例子中，我们将Linux_For_Beginners.pdf转换的图片DPI质量调整为300。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pdftoppm <span class="token parameter variable">-png</span> <span class="token parameter variable">-rx</span> <span class="token number">300</span> <span class="token parameter variable">-ry</span> <span class="token number">300</span> Linux_For_Beginners.pdf Linux_For_Beginners<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要查看pdftoppm中可用和支持的所有选项，请运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pdftoppm <span class="token parameter variable">--help</span>  <span class="token function">man</span> pdftoppm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="强制结束程序"><a href="#强制结束程序" class="headerlink" title="强制结束程序"></a>强制结束程序</h2><h3 id="找到程序运行的进程号"><a href="#找到程序运行的进程号" class="headerlink" title="找到程序运行的进程号"></a>找到程序运行的进程号</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pgrep <span class="token parameter variable">-f</span> <span class="token string">"software_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pidof software_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 ps 命令找到进程号</span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"process_name"</span><span class="token comment"># 或者使用 pgrep 命令</span>pgrep <span class="token parameter variable">-f</span> <span class="token string">"process_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>强制 (PID为进程号)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token parameter variable">-9</span> PID<span class="token comment">#或者</span><span class="token function">pkill</span> <span class="token parameter variable">-9</span> <span class="token string">"process_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Ubuntu22-04利用lightdm替换gdm3出现的问题或Bug"><a href="#Ubuntu22-04利用lightdm替换gdm3出现的问题或Bug" class="headerlink" title="Ubuntu22.04利用lightdm替换gdm3出现的问题或Bug"></a>Ubuntu22.04利用lightdm替换gdm3出现的问题或Bug</h2><h3 id="查看当前屏幕管理器"><a href="#查看当前屏幕管理器" class="headerlink" title="查看当前屏幕管理器"></a>查看当前屏幕管理器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etx/X11/default-display-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看当前桌面环境"><a href="#查看当前桌面环境" class="headerlink" title="查看当前桌面环境"></a>查看当前桌面环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$DESKTOP_SESSION</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="切换屏幕管理器"><a href="#切换屏幕管理器" class="headerlink" title="切换屏幕管理器"></a>切换屏幕管理器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg-reconfigure gdm3<span class="token function">sudo</span> dpkg-reconfigure lightdm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="推荐下载lightdm屏幕管理器"><a href="#推荐下载lightdm屏幕管理器" class="headerlink" title="推荐下载lightdm屏幕管理器"></a>推荐下载lightdm屏幕管理器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lightdm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修复lightdm无法锁屏的问题"><a href="#修复lightdm无法锁屏的问题" class="headerlink" title="修复lightdm无法锁屏的问题"></a>修复lightdm无法锁屏的问题</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gsettings get org.gnome.desktop.lockdown disable-lock-screen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查disable-lock-screen属性，若输出false则是正常，如果返回值是True，则输入下面命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gsettings <span class="token builtin class-name">set</span> org.gnome.desktop.lockdown disable-lock-screen <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改为flase，</p><p>输入下面命令看是否可以锁屏：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dm-tool lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若可以实现锁屏，就是图形界面是lightdm而不是gdm3，使用了lightdm 桌面管理器，导致锁屏命令变化，即：设置-&gt;键盘快捷键-&gt;添加自定义快捷键：</p><p>禁用原锁屏键</p><img src="/2023/12/10/ubuntu/lock-pingmu.png" class="" title="禁用锁屏快捷键"><p>自定义快捷键</p><img src="/2023/12/10/ubuntu/zidingyi.png" class="" title="自定义快捷键"><h2 id="输入法无法切换中文"><a href="#输入法无法切换中文" class="headerlink" title="输入法无法切换中文"></a>输入法无法切换中文</h2><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>目前gdm3无法使用中文，我使用的是lightdm屏幕管理器</p><p>使用搜狗输入法</p><p>安装搜狗输入法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> sogoupinyin_4.0.1.2800_x86_64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主要是因为缺少包导致的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libgsettings-qt1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li>[1] <a href="https://blog.csdn.net/qq_39779233/article/details/127290795">wonghome. Ubuntu 18.04 安装搜狗输入法 [EB/OL].</a></li><li>[2] <a href="https://blog.csdn.net/yuzhongmanbu99/article/details/127944446">雨中漫步-99. ubuntu系统安装好搜狗输入法后只能输入英文，无法输入中文的解决方案 [EB/OL]. </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-matery</title>
      <link href="/2023/12/10/hexo-matery/"/>
      <url>/2023/12/10/hexo-matery/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建hexo"><a href="#搭建hexo" class="headerlink" title="搭建hexo"></a>搭建hexo</h2><h3 id="安装前置工具"><a href="#安装前置工具" class="headerlink" title="安装前置工具"></a>安装前置工具</h3><p>首先需要安装</p><ul><li><p><a href="https://nodejs.org/en">Node.js</a>((Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本))</p></li><li><p><a href="https://git-scm.com/">Git</a></p></li></ul><p>建议将Node.js和Git都放进环境变量</p><img src="/2023/12/10/hexo-matery/environment-variables.png" class="" title="环境变量"><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>网站配置信息位于_config.yml</p><p>资源文件夹位于source/</p><p>主题文件夹位于themes/</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>参数配置请参考</p><p><a href="https://hexo.io/zh-cn/docs/configuration">hexo官方文档-配置</a></p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="初始化init"><a href="#初始化init" class="headerlink" title="初始化init"></a>初始化init</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建一篇文章new"><a href="#新建一篇文章new" class="headerlink" title="新建一篇文章new"></a>新建一篇文章new</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><p>例如<code>hexo new "post title with whitespace"</code></p><h4 id="生成静态文件generate"><a href="#生成静态文件generate" class="headerlink" title="生成静态文件generate"></a>生成静态文件generate</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以简写为<code>hexo g</code></p><h4 id="启动服务server"><a href="#启动服务server" class="headerlink" title="启动服务server"></a>启动服务server</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><p>可以简写为<code>hexo s</code></p><h4 id="部署网站deploy"><a href="#部署网站deploy" class="headerlink" title="部署网站deploy"></a>部署网站deploy</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以简写为<code>hexo d</code></p><h4 id="清除缓存文件-db-json-和已生成的静态文件-public-。clean"><a href="#清除缓存文件-db-json-和已生成的静态文件-public-。clean" class="headerlink" title="清除缓存文件 (db.json) 和已生成的静态文件 (public)。clean"></a>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。clean</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示版本version"><a href="#显示版本version" class="headerlink" title="显示版本version"></a>显示版本version</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="在-GitHub-Pages-上部署-Hexo"><a href="#在-GitHub-Pages-上部署-Hexo" class="headerlink" title="在 GitHub Pages 上部署 Hexo"></a>在 GitHub Pages 上部署 Hexo</h4><h5 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h5><ol><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。<code>npm install hexo-deployer-git --save</code></li><li>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: https://github.com/<span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>project<span class="token operator">&gt;</span>  <span class="token comment"># example, https://github.com/hexojs/hexojs.github.io</span>  branch: gh-pages<span class="token punctuation">(</span>你的分支名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>执行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</li><li>浏览 <code>&lt;GitHub 用户名&gt;.github.io</code> 检查你的网站能否运作。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>[1] <a href="https://hexo.io/zh-cn/">hexo官方文档</a></li></ul><h2 id="配置matery主题"><a href="#配置matery主题" class="headerlink" title="配置matery主题"></a>配置matery主题</h2><h3 id="仓库位置"><a href="#仓库位置" class="headerlink" title="仓库位置"></a>仓库位置</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p><p>将此仓库clone到你站点的themes/文件夹下</p><p>按照blinkfox大神的说明配置即可</p><h2 id="图片无法显示"><a href="#图片无法显示" class="headerlink" title="图片无法显示"></a>图片无法显示</h2><p>修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><p>安装插件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-image-link <span class="token parameter variable">--save</span><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启用:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># _config.yml</span>post_asset_folder: <span class="token boolean">true</span>marked:  prependRoot: <span class="token boolean">true</span>  postAsset: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用后，资源图片将会被自动解析为其对应文章的路径。</p><p>需要注意的是:图片名最好是英文名称,如果你自己重命名了图片为中文名称的话，将出现不可预知的错误。</p><p>例如： <code>image.jpg</code> 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src="/2020/01/02/foo/image.jpg"&gt;</code> 。</p><h3 id="使用typora优化体验"><a href="#使用typora优化体验" class="headerlink" title="使用typora优化体验"></a>使用typora优化体验</h3><img src="/2023/12/10/hexo-matery/Typora-picture-configuration.png" class="" title="Typora图像设置"><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li>[1] <a href="http://edulinks.cn/2020/03/14/20200314-write-hexo-with-typora/">Hexo博客写作与图片处理的经验</a></li><li>[2] <a href="https://hexo.io/zh-cn/docs/asset-folders.html">Hexo官方文档</a></li></ul><h2 id="代码块问题"><a href="#代码块问题" class="headerlink" title="代码块问题"></a>代码块问题</h2><p>正常配置代码块会变成这样</p><img src="/2023/12/10/hexo-matery/ugly-code-blocks.png" class="" title="难看的代码块"><p>除了使用blinkfox大神的配置外</p><img src="/2023/12/10/hexo-matery/Configuration-of-code-blocks-by-blinkfox-master.png" class="" title="blinkfox大神代码块的配置"><p>还应该参考hexo官方文档给出的解决方案</p><img src="/2023/12/10/hexo-matery/hexo-official-document-about-prismjs-configuration.png" class="" title="hexo官方文档关于prismjs的配置"><p>主要修改<code>syntax_highlighter</code>和<code>line_threshould</code>即可</p><p>修改后的代码块</p><img src="/2023/12/10/hexo-matery/Modified-code-block.png" class="" title="修改后的代码块"><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li>[1] <a href="https://hexo.io/zh-cn/docs/syntax-highlight#PrismJS">hexo关于代码高亮的官方文档</a></li><li>[2] <a href="https://github.com/KeyenZhou/hexo-theme-matery/blob/develop/README_CN.md">hexo-matery主题配置</a></li></ul><h2 id="hexo传输过程的警告和error"><a href="#hexo传输过程的警告和error" class="headerlink" title="hexo传输过程的警告和error"></a>hexo传输过程的警告和error</h2><h3 id="Windows下Git使用警告：warning：LF-will-be-replaced-by-CRLF-in-××××-××"><a href="#Windows下Git使用警告：warning：LF-will-be-replaced-by-CRLF-in-××××-××" class="headerlink" title="Windows下Git使用警告：warning：LF will be replaced by CRLF in ××××.××"></a>Windows下Git使用警告：warning：LF will be replaced by CRLF in ××××.××</h3><p><strong>1、不同操作系统下，处理行尾结束符的方法是不同的</strong>：</p><p>　windows下：CRLF（表示句尾使用回车换行两个字符，即windows下的”\r\n”换行）</p><p>​    unix下：LF（表示句尾，只使用换行）</p><p>​    mac下：CR（表示只使用回车）</p><p><strong>2、Git下处理“换行”（line ending）</strong></p><p>　　core.autocrlf是git中负责处理line ending的变量，可以设置3个值：true，false，inout。</p><p>（1）设置为true <code>git config --global core.autocrlf true</code></p><p>​     当设置成true时，这意味着你在任何时候添加(add)文件到git仓库时，git都会视为它是一个文本文件(text file)。</p><p>　　　它将把crlf变成LF。</p><p>（2）设置为false <code>git config --global core.autocrlf false</code></p><p>  　当设置成false时，line endings将不做转换操作。文本文件保持原来的样子。</p><p>（3）设置为input时，添加文件git仓库时，git把crlf编程lf。当有人Check代码时还是lf方式。因此在window操作系统下，不要使用这个设置。</p><h2 id="部署评论模块"><a href="#部署评论模块" class="headerlink" title="部署评论模块"></a>部署评论模块</h2><h3 id="livere"><a href="#livere" class="headerlink" title="livere"></a>livere</h3><p>我们可以看到/themes/hexo-theme-matery/_config.yml</p><p>有如下配置信息</p><img src="/2023/12/10/hexo-matery/livere-config.png" class="" title="livere配置"><p>在来必力网站注册:</p><p><a href="https://www.livere.com/">来必力</a></p><p>注册好账号之后打开：后台管理——&gt;代码管理 复制 data-uid的值，如下图</p><img src="/2023/12/10/hexo-matery/Laibili-management-interface.png" class="" title="来必力管理界面"><p>将data-uid的值填入_config.yml配置文件里面的uid即可。</p>]]></content>
      
      
      <categories>
          
          <category> hexo-matery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/10/hello-world/"/>
      <url>/2023/12/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
